<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>blog</title>
<link>https://doucx.github.io/blog/blog/index.html</link>
<atom:link href="https://doucx.github.io/blog/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>my blog</description>
<generator>quarto-1.2.475</generator>
<lastBuildDate>Sat, 11 Mar 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>从零(存疑)开始的聊天机器人</title>
  <dc:creator>Doucx</dc:creator>
  <link>https://doucx.github.io/blog/blog/posts/23_03_11_聊天机器人尝试/03_11_聊天机器人尝试.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> flask <span class="im" style="color: #00769E;">import</span> Flask, request</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> whisper</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> zhconv</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> wcpdtoolbox.imports <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<p>一直想要一个聊天机器人–也就是那种可以聊天的机器人(废话)</p>
<p>就是像siri那样可以听和读并且可以设置提醒,像chatgpt那样有能,并且最好接入qq什么的</p>
<section id="需要的东西" class="level2">
<h2 class="anchored" data-anchor-id="需要的东西">需要的东西</h2>
<p>首先,想想我需要什么来构筑这个…管道</p>
<ol type="1">
<li>音频网络之类的接口</li>
<li>语音转文字+文字转语音</li>
<li>自然语言处理</li>
<li>一大堆数据集</li>
</ol>
<p>有了这些,大概就可以构筑这个模型了…至于形象,可以之后设置</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://doucx.github.io/blog/blog/posts/23_03_11_聊天机器人尝试/23_03_11_聊天机器人尝试_files/figure-html/46583138-b999-41a9-a170-28ecdf02636c-1-54d5cf68-08ef-4bb7-a667-26783fe0f160.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image.png</figcaption><p></p>
</figure>
</div>
</section>
<section id="语音识别" class="level2">
<h2 class="anchored" data-anchor-id="语音识别">语音识别</h2>
<p>步子不能迈太大:所以我准备先把语音识别处理了</p>
<p>一个后端与一个前端,但是前端我不是很熟…慢慢来吧</p>
<section id="使用预训练模型" class="level3">
<h3 class="anchored" data-anchor-id="使用预训练模型">使用预训练模型</h3>
<p>使用openai-whisper</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">model <span class="op" style="color: #5E5E5E;">=</span> whisper.load_model(<span class="st" style="color: #20794D;">"small"</span>, device<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"cuda"</span>)</span></code></pre></div>
</div>
<section id="快速" class="level4">
<h4 class="anchored" data-anchor-id="快速">快速</h4>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pred <span class="op" style="color: #5E5E5E;">=</span> model.transcribe(<span class="st" style="color: #20794D;">"/ailearn/dataset/voice_dataset/audios/long0.wav"</span>)</span>
<span id="cb3-2">zhconv.convert(pred[<span class="st" style="color: #20794D;">"text"</span>],  <span class="st" style="color: #20794D;">'zh-hans'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 2.72 s, sys: 0 ns, total: 2.72 s
Wall time: 2.47 s</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'语音识别技术的应用包括语音波号,语音导航室内设备控制,语音文档检索,简单的听写数据输入等。语音识别技术与其他自然语言处理技术如机器翻译及语音课程技术相结合,可以构建出更加复杂的应用。语音识别技术作设举的领域包括信号处理,模式识别,概率论和信息论,发声机理和视觉听理,人工智能等等。'</code></pre>
</div>
</div>
<p>效果挺好</p>
</section>
<section id="内部" class="level4">
<h4 class="anchored" data-anchor-id="内部">内部</h4>
<p>加载音频</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">audio <span class="op" style="color: #5E5E5E;">=</span> whisper.load_audio(<span class="st" style="color: #20794D;">"/ailearn/dataset/voice_dataset/audios/long0.wav"</span>)</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># audio = np.random.randn(1000).astype(np.float32)*10</span></span>
<span id="cb6-3">audio <span class="op" style="color: #5E5E5E;">=</span> whisper.pad_or_trim(audio)</span>
<span id="cb6-4">mel <span class="op" style="color: #5E5E5E;">=</span> whisper.log_mel_spectrogram(audio).to(model.device)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">audio.dtype</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>dtype('float32')</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">plt.imshow(to_detach(mel))</span>
<span id="cb9-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_03_11_聊天机器人尝试/23_03_11_聊天机器人尝试_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>decode the audio</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">options <span class="op" style="color: #5E5E5E;">=</span> whisper.DecodingOptions()</span>
<span id="cb10-2">result <span class="op" style="color: #5E5E5E;">=</span> whisper.decode(model, mel, options)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 1.63 s, sys: 0 ns, total: 1.63 s
Wall time: 1.49 s</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">result.text</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'语音识别技术的应用包括语音波号,语音导航室内设备控制,语音文档检索,简单的听写数据输入等。语音识别技术与其他自然语言处理技术如机器翻译及语音课程技术相结合,可以构建出更加复杂的应用。'</code></pre>
</div>
</div>
<p><em>居然要整整1.5s来处理这东西…</em></p>
</section>
</section>
<section id="应用" class="level3">
<h3 class="anchored" data-anchor-id="应用">应用</h3>
<p>应用需要制作一个可以使用get-post的东西,也就是后端 - 收:音频array - 发:文本</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">app <span class="op" style="color: #5E5E5E;">=</span> Flask(<span class="va" style="color: #111111;">__name__</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">def</span> pred_bytes(data):</span>
<span id="cb15-2">    data <span class="op" style="color: #5E5E5E;">=</span> torch.frombuffer(data, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float32).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb15-3">    data <span class="op" style="color: #5E5E5E;">=</span> whisper.pad_or_trim(data)</span>
<span id="cb15-4">    mel <span class="op" style="color: #5E5E5E;">=</span> whisper.log_mel_spectrogram(data).to(model.device)</span>
<span id="cb15-5">    plt.imshow(to_detach(mel))</span>
<span id="cb15-6">    options <span class="op" style="color: #5E5E5E;">=</span> whisper.DecodingOptions()</span>
<span id="cb15-7">    result <span class="op" style="color: #5E5E5E;">=</span> whisper.decode(model, mel, options)</span>
<span id="cb15-8">    <span class="cf" style="color: #003B4F;">return</span> result.text</span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;"># nrint(pred)</span></span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;"># return "qwq"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;">def</span> pred_bytes(data):</span>
<span id="cb16-2">    data <span class="op" style="color: #5E5E5E;">=</span> torch.frombuffer(data, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.int16).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb16-3">    data <span class="op" style="color: #5E5E5E;">=</span> whisper.pad_or_trim(data)</span>
<span id="cb16-4">    mel <span class="op" style="color: #5E5E5E;">=</span> whisper.log_mel_spectrogram(data).to(model.device)</span>
<span id="cb16-5">    options <span class="op" style="color: #5E5E5E;">=</span> whisper.DecodingOptions()</span>
<span id="cb16-6">    result <span class="op" style="color: #5E5E5E;">=</span> whisper.decode(model, mel, options)</span>
<span id="cb16-7">    <span class="cf" style="color: #003B4F;">return</span> result.text</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">audio <span class="op" style="color: #5E5E5E;">=</span> whisper.load_audio(<span class="st" style="color: #20794D;">"/ailearn/dataset/voice_dataset/audios/long0.wav"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">pred_bytes(audio.tobytes())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'语音识别技术的应用包括语音波号,语音导航室内设备控制,语音文档检索,简单的听写数据输入等。语音识别技术与其他自然语言处理技术如机器翻译及语音课程技术相结合,可以构建出更加复杂的应用。'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_03_11_聊天机器人尝试/23_03_11_聊天机器人尝试_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="at" style="color: #657422;">@app.route</span>(<span class="st" style="color: #20794D;">'/'</span>, methods<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'GET'</span>, <span class="st" style="color: #20794D;">'POST'</span>])</span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;">def</span> upload_file():</span>
<span id="cb20-3">    <span class="cf" style="color: #003B4F;">if</span> request.method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'POST'</span>:</span>
<span id="cb20-4">        text <span class="op" style="color: #5E5E5E;">=</span> pred_bytes(request.data)</span>
<span id="cb20-5">        <span class="cf" style="color: #003B4F;">return</span> text</span>
<span id="cb20-6">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"upload_frame"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">app.run(port<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">43692</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> * Serving Flask app '__main__'
 * Debug mode: off</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:43692
Press CTRL+C to quit
127.0.0.1 - - [13/Mar/2023 15:39:08] "POST / HTTP/1.1" 200 -</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_03_11_聊天机器人尝试/23_03_11_聊天机器人尝试_files/figure-html/cell-16-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="flask测试2" class="level1">
<h1>Flask测试2</h1>
<p>更新</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">model <span class="op" style="color: #5E5E5E;">=</span> whisper.load_model(<span class="st" style="color: #20794D;">"medium"</span>).cuda()<span class="co" style="color: #5E5E5E;">#.float()</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">port <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">43696</span></span>
<span id="cb25-2">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"http://localhost"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">gp <span class="op" style="color: #5E5E5E;">=</span> Queue()</span></code></pre></div>
</div>
<p>一个数据传递类</p>
<p>使用队列进行阻塞,并使用numpy读取音频</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;">class</span> P:</span>
<span id="cb27-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, count: <span class="bu" style="color: null;">bytes</span>):</span>
<span id="cb27-3">        <span class="va" style="color: #111111;">self</span>.data <span class="op" style="color: #5E5E5E;">=</span> np.load(BytesIO(count)).astype(<span class="st" style="color: #20794D;">"f4"</span>)<span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">32768.0</span></span>
<span id="cb27-4">        <span class="co" style="color: #5E5E5E;"># q.put(self)</span></span>
<span id="cb27-5">        <span class="va" style="color: #111111;">self</span>.q <span class="op" style="color: #5E5E5E;">=</span> Manager().Queue()</span>
<span id="cb27-6">        <span class="va" style="color: #111111;">self</span>.need_to_pred <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb27-7">        </span>
<span id="cb27-8">    <span class="kw" style="color: #003B4F;">def</span> get(<span class="va" style="color: #111111;">self</span>)<span class="op" style="color: #5E5E5E;">-&gt;</span><span class="bu" style="color: null;">str</span>:</span>
<span id="cb27-9">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb27-10">            text <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.q.get(timeout<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb27-11">        <span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb27-12">            <span class="va" style="color: #111111;">self</span>.need_to_pred <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb27-13">            text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Oops, timeout"</span></span>
<span id="cb27-14">        <span class="cf" style="color: #003B4F;">return</span> text</span></code></pre></div>
</div>
<p>循环识别</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">def</span> start_loop(q<span class="op" style="color: #5E5E5E;">=</span>gp):</span>
<span id="cb28-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"loop start"</span>)</span>
<span id="cb28-3">    <span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb28-4">        p <span class="op" style="color: #5E5E5E;">=</span> q.get()</span>
<span id="cb28-5">        <span class="cf" style="color: #003B4F;">if</span> p.need_to_pred:</span>
<span id="cb28-6">            data <span class="op" style="color: #5E5E5E;">=</span> p.data</span>
<span id="cb28-7">            <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"get data"</span>)</span>
<span id="cb28-8">            text <span class="op" style="color: #5E5E5E;">=</span> model.transcribe(data)</span>
<span id="cb28-9">            p.q.put(text)</span>
<span id="cb28-10">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb28-11">            <span class="cf" style="color: #003B4F;">continue</span></span></code></pre></div>
</div>
<p>服务器,使用<code>P</code>来吧数据传递到whisper</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">app <span class="op" style="color: #5E5E5E;">=</span> Flask(<span class="va" style="color: #111111;">__name__</span>)</span>
<span id="cb29-2"><span class="at" style="color: #657422;">@app.route</span>(<span class="st" style="color: #20794D;">'/'</span>, methods<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'GET'</span>, <span class="st" style="color: #20794D;">'POST'</span>])</span>
<span id="cb29-3"><span class="kw" style="color: #003B4F;">def</span> upload_file():</span>
<span id="cb29-4">    <span class="cf" style="color: #003B4F;">if</span> request.method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'POST'</span>:</span>
<span id="cb29-5">        cont <span class="op" style="color: #5E5E5E;">=</span> request.data</span>
<span id="cb29-6">        p <span class="op" style="color: #5E5E5E;">=</span> P(cont)</span>
<span id="cb29-7">        gp.put(p)</span>
<span id="cb29-8">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"put success"</span>)</span>
<span id="cb29-9">        text <span class="op" style="color: #5E5E5E;">=</span> p.get()</span>
<span id="cb29-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"sent"</span>, text)</span>
<span id="cb29-11">        <span class="cf" style="color: #003B4F;">return</span> jsonify(text)</span>
<span id="cb29-12">    <span class="co" style="color: #5E5E5E;">#jsonify({"head":"cool,you up a file", "data":cont["file"]})</span></span>
<span id="cb29-13">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"send audio bytes 1d int16 16000rate"</span></span></code></pre></div>
</div>
<p>调试时如果出错,可以把app给kill</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="cf" style="color: #003B4F;">try</span>: app_P.kill()</span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;">except</span>: <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"first_start"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">app_P <span class="op" style="color: #5E5E5E;">=</span> Process(target<span class="op" style="color: #5E5E5E;">=</span>app.run, kwargs<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(port<span class="op" style="color: #5E5E5E;">=</span>port))</span>
<span id="cb31-2"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb31-3">    app_P.start()</span>
<span id="cb31-4">    start_loop()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> * Serving Flask app '__main__'
 * Debug mode: off</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:43696
Press CTRL+C to quit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>loop start
put success
get data</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>MIOpen(HIP): Warning [SQLiteBase] Missing system database file: gfx1030_16.kdb Performance may degrade. Please follow instructions to install: https://github.com/ROCmSoftwarePlatform/MIOpen#installing-miopen-kernels-package</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>sent {'text': '我们的研究表明 与许多现有的ASR系统相比这些模型对口音 背景噪音 技术语言以及从多种语言到英语的零样本翻译者中表现出更高的入放性并且与音识别和翻译的准确性接近最先进的水平', 'segments': [{'id': 0, 'seek': 0, 'start': 0.0, 'end': 4.48, 'text': '我们的研究表明 与许多现有的ASR系统相比', 'tokens': [50364, 15003, 1546, 23230, 242, 44704, 17571, 11100, 220, 940, 236, 7422, 116, 6392, 20204, 2412, 1546, 3160, 49, 25368, 10115, 253, 15106, 11706, 50588], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 1, 'seek': 0, 'start': 4.48, 'end': 7.68, 'text': '这些模型对口音 背景噪音 技术语言', 'tokens': [50588, 5562, 13824, 41908, 39823, 8713, 18144, 18034, 220, 46329, 50218, 21250, 103, 18034, 220, 32502, 1474, 107, 5233, 255, 12009, 50748], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 2, 'seek': 0, 'start': 7.68, 'end': 12.8, 'text': '以及从多种语言到英语的零样本翻译者中', 'tokens': [50748, 40282, 35630, 6392, 39810, 5233, 255, 12009, 4511, 27869, 5233, 255, 1546, 6306, 114, 14496, 8802, 42716, 5233, 239, 12444, 5975, 51004], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 3, 'seek': 0, 'start': 12.8, 'end': 14.72, 'text': '表现出更高的入放性', 'tokens': [51004, 17571, 20204, 7781, 19002, 12979, 1546, 14028, 12744, 21686, 51100], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 4, 'seek': 0, 'start': 14.72, 'end': 19.2, 'text': '并且与音识别和翻译的准确性接近最先进的水平', 'tokens': [51100, 3509, 114, 20334, 940, 236, 18034, 5233, 228, 18453, 12565, 42716, 5233, 239, 1546, 6336, 228, 38114, 106, 21686, 14468, 17463, 8661, 10108, 36700, 1546, 15590, 16716, 51324], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}], 'language': 'zh'}</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>127.0.0.1 - - [22/Mar/2023 12:42:35] "POST / HTTP/1.1" 200 -</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>put success
get data
sent {'text': '我们的研究表明 与许多现有的ASR系统相比这些模型对口音 背景噪音 技术语言以及从多种语言到英语的零样本翻译者中表现出更高的入放性并且与音识别和翻译的准确性接近最先进的水平', 'segments': [{'id': 0, 'seek': 0, 'start': 0.0, 'end': 4.48, 'text': '我们的研究表明 与许多现有的ASR系统相比', 'tokens': [50364, 15003, 1546, 23230, 242, 44704, 17571, 11100, 220, 940, 236, 7422, 116, 6392, 20204, 2412, 1546, 3160, 49, 25368, 10115, 253, 15106, 11706, 50588], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 1, 'seek': 0, 'start': 4.48, 'end': 7.68, 'text': '这些模型对口音 背景噪音 技术语言', 'tokens': [50588, 5562, 13824, 41908, 39823, 8713, 18144, 18034, 220, 46329, 50218, 21250, 103, 18034, 220, 32502, 1474, 107, 5233, 255, 12009, 50748], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 2, 'seek': 0, 'start': 7.68, 'end': 12.8, 'text': '以及从多种语言到英语的零样本翻译者中', 'tokens': [50748, 40282, 35630, 6392, 39810, 5233, 255, 12009, 4511, 27869, 5233, 255, 1546, 6306, 114, 14496, 8802, 42716, 5233, 239, 12444, 5975, 51004], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 3, 'seek': 0, 'start': 12.8, 'end': 14.72, 'text': '表现出更高的入放性', 'tokens': [51004, 17571, 20204, 7781, 19002, 12979, 1546, 14028, 12744, 21686, 51100], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 4, 'seek': 0, 'start': 14.72, 'end': 19.2, 'text': '并且与音识别和翻译的准确性接近最先进的水平', 'tokens': [51100, 3509, 114, 20334, 940, 236, 18034, 5233, 228, 18453, 12565, 42716, 5233, 239, 1546, 6336, 228, 38114, 106, 21686, 14468, 17463, 8661, 10108, 36700, 1546, 15590, 16716, 51324], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}], 'language': 'zh'}</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>127.0.0.1 - - [22/Mar/2023 12:42:46] "POST / HTTP/1.1" 200 -</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>put success
get data
sent {'text': '我们的研究表明 与许多现有的ASR系统相比这些模型对口音 背景噪音 技术语言以及从多种语言到英语的零样本翻译者中表现出更高的入放性并且与音识别和翻译的准确性接近最先进的水平', 'segments': [{'id': 0, 'seek': 0, 'start': 0.0, 'end': 4.48, 'text': '我们的研究表明 与许多现有的ASR系统相比', 'tokens': [50364, 15003, 1546, 23230, 242, 44704, 17571, 11100, 220, 940, 236, 7422, 116, 6392, 20204, 2412, 1546, 3160, 49, 25368, 10115, 253, 15106, 11706, 50588], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 1, 'seek': 0, 'start': 4.48, 'end': 7.68, 'text': '这些模型对口音 背景噪音 技术语言', 'tokens': [50588, 5562, 13824, 41908, 39823, 8713, 18144, 18034, 220, 46329, 50218, 21250, 103, 18034, 220, 32502, 1474, 107, 5233, 255, 12009, 50748], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 2, 'seek': 0, 'start': 7.68, 'end': 12.8, 'text': '以及从多种语言到英语的零样本翻译者中', 'tokens': [50748, 40282, 35630, 6392, 39810, 5233, 255, 12009, 4511, 27869, 5233, 255, 1546, 6306, 114, 14496, 8802, 42716, 5233, 239, 12444, 5975, 51004], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 3, 'seek': 0, 'start': 12.8, 'end': 14.72, 'text': '表现出更高的入放性', 'tokens': [51004, 17571, 20204, 7781, 19002, 12979, 1546, 14028, 12744, 21686, 51100], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 4, 'seek': 0, 'start': 14.72, 'end': 19.2, 'text': '并且与音识别和翻译的准确性接近最先进的水平', 'tokens': [51100, 3509, 114, 20334, 940, 236, 18034, 5233, 228, 18453, 12565, 42716, 5233, 239, 1546, 6336, 228, 38114, 106, 21686, 14468, 17463, 8661, 10108, 36700, 1546, 15590, 16716, 51324], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}], 'language': 'zh'}</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>127.0.0.1 - - [22/Mar/2023 12:45:07] "POST / HTTP/1.1" 200 -</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>put success
get data
sent {'text': '我们的研究表明 与许多现有的ASR系统相比这些模型对口音 背景噪音 技术语言以及从多种语言到英语的零样本翻译者中表现出更高的入放性并且与音识别和翻译的准确性接近最先进的水平', 'segments': [{'id': 0, 'seek': 0, 'start': 0.0, 'end': 4.48, 'text': '我们的研究表明 与许多现有的ASR系统相比', 'tokens': [50364, 15003, 1546, 23230, 242, 44704, 17571, 11100, 220, 940, 236, 7422, 116, 6392, 20204, 2412, 1546, 3160, 49, 25368, 10115, 253, 15106, 11706, 50588], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 1, 'seek': 0, 'start': 4.48, 'end': 7.68, 'text': '这些模型对口音 背景噪音 技术语言', 'tokens': [50588, 5562, 13824, 41908, 39823, 8713, 18144, 18034, 220, 46329, 50218, 21250, 103, 18034, 220, 32502, 1474, 107, 5233, 255, 12009, 50748], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 2, 'seek': 0, 'start': 7.68, 'end': 12.8, 'text': '以及从多种语言到英语的零样本翻译者中', 'tokens': [50748, 40282, 35630, 6392, 39810, 5233, 255, 12009, 4511, 27869, 5233, 255, 1546, 6306, 114, 14496, 8802, 42716, 5233, 239, 12444, 5975, 51004], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 3, 'seek': 0, 'start': 12.8, 'end': 14.72, 'text': '表现出更高的入放性', 'tokens': [51004, 17571, 20204, 7781, 19002, 12979, 1546, 14028, 12744, 21686, 51100], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}, {'id': 4, 'seek': 0, 'start': 14.72, 'end': 19.2, 'text': '并且与音识别和翻译的准确性接近最先进的水平', 'tokens': [51100, 3509, 114, 20334, 940, 236, 18034, 5233, 228, 18453, 12565, 42716, 5233, 239, 1546, 6336, 228, 38114, 106, 21686, 14468, 17463, 8661, 10108, 36700, 1546, 15590, 16716, 51324], 'temperature': 0.0, 'avg_logprob': -0.20650776012523755, 'compression_ratio': 1.1495327102803738, 'no_speech_prob': 0.01817532628774643}], 'language': 'zh'}</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>127.0.0.1 - - [22/Mar/2023 12:45:16] "POST / HTTP/1.1" 200 -</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>KeyboardInterrupt: </code></pre>
</div>
</div>
<p>效果不能说特别好,可能需要微调…不过至少能用!</p>


</section>

 ]]></description>
  <guid>https://doucx.github.io/blog/blog/posts/23_03_11_聊天机器人尝试/03_11_聊天机器人尝试.html</guid>
  <pubDate>Sat, 11 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://doucx.github.io/blog/blog/posts/23_03_11_聊天机器人尝试/attachment:54d5cf68-08ef-4bb7-a667-26783fe0f160.png" medium="image" type="image/png"/>
</item>
<item>
  <title>模型的解释</title>
  <dc:creator>Doucx</dc:creator>
  <link>https://doucx.github.io/blog/blog/posts/23_03_09_模型的解释/03_09_模型的解释.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> wcpdtoolbox.visualization <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># from fastai.callback.hook import *</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> fastai.test_utils <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-4">model <span class="op" style="color: #5E5E5E;">=</span> resnet18().cuda()</span></code></pre></div>
</div>
<p>对于一个模型,我们可以轻易查看它的输入和输出.但是,它的中间层仍然对我不可知.</p>
<p>现在,我需要克服这个缺陷</p>
<section id="summary-model" class="level2">
<h2 class="anchored" data-anchor-id="summary-model">Summary Model</h2>
<blockquote class="blockquote">
<p>观察模型各层的grad</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">c <span class="op" style="color: #5E5E5E;">=</span> L()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">adam <span class="op" style="color: #5E5E5E;">=</span> Adam(model.parameters(), <span class="fl" style="color: #AD0000;">1e-4</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">30</span>):</span>
<span id="cb4-2">    l <span class="op" style="color: #5E5E5E;">=</span> L()</span>
<span id="cb4-3">    x <span class="op" style="color: #5E5E5E;">=</span> model(torch.randn(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">64</span>,<span class="dv" style="color: #AD0000;">64</span>).cuda())</span>
<span id="cb4-4">    x.<span class="bu" style="color: null;">sum</span>().<span class="bu" style="color: null;">abs</span>().backward()</span>
<span id="cb4-5">    adam.step()</span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> model.parameters():</span>
<span id="cb4-7">        l.append(i)</span>
<span id="cb4-8">    l <span class="op" style="color: #5E5E5E;">=</span> l.<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> x:to_detach(x.grad.<span class="bu" style="color: null;">abs</span>().mean()))</span>
<span id="cb4-9">    model.zero_grad()</span>
<span id="cb4-10">    c.append(l)</span>
<span id="cb4-11">c2 <span class="op" style="color: #5E5E5E;">=</span> c.copy()</span>
<span id="cb4-12">c2.reverse()</span>
<span id="cb4-13">plt.imshow(np.log1p(array(c2).T))</span>
<span id="cb4-14">plt.show()</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="bu" style="color: null;">print</span>(x.<span class="bu" style="color: null;">sum</span>())</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>MIOpen(HIP): Warning [SQLiteBase] Missing system database file: gfx1030_16.kdb Performance may degrade. Please follow instructions to install: https://github.com/ROCmSoftwarePlatform/MIOpen#installing-miopen-kernels-package</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_03_09_模型的解释/23_03_09_模型的解释_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(-74.4779, device='cuda:0', grad_fn=&lt;SumBackward0&gt;)</code></pre>
</div>
</div>
<p>这样就可以看见它的梯度了,不过依然没有名字</p>
<section id="制作一个显示梯度的callback" class="level3">
<h3 class="anchored" data-anchor-id="制作一个显示梯度的callback">制作一个显示梯度的callback</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">learner <span class="op" style="color: #5E5E5E;">=</span> synth_learner()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">class</span> GradShowCallback(Callback):</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, l, <span class="op" style="color: #5E5E5E;">**</span>kwargs): </span>
<span id="cb8-3">        <span class="cf" style="color: #003B4F;">assert</span> <span class="kw" style="color: #003B4F;">not</span> kwargs, <span class="ss" style="color: #20794D;">f'Passed unknown events: </span><span class="sc" style="color: #5E5E5E;">{</span>kwargs<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb8-4">        <span class="va" style="color: #111111;">self</span>.grad_list <span class="op" style="color: #5E5E5E;">=</span> l</span>
<span id="cb8-5">    <span class="kw" style="color: #003B4F;">def</span> before_step(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb8-6">        k <span class="op" style="color: #5E5E5E;">=</span> L([to_detach(i.grad.<span class="bu" style="color: null;">abs</span>().mean()) <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.learn.model.parameters()])</span>
<span id="cb8-7">        <span class="va" style="color: #111111;">self</span>.grad_list.append(k)</span>
<span id="cb8-8">    </span>
<span id="cb8-9">    <span class="kw" style="color: #003B4F;">def</span> after_fit(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb8-10">        [plt.plot(i) <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> array(<span class="va" style="color: #111111;">self</span>.grad_list).T]</span>
<span id="cb8-11">        plt.show()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">l <span class="op" style="color: #5E5E5E;">=</span> L()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">learner.fit_one_cycle(<span class="dv" style="color: #AD0000;">10</span>, cbs<span class="op" style="color: #5E5E5E;">=</span>GradShowCallback(l))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>25.333673</td>
      <td>27.027384</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>1</td>
      <td>23.795195</td>
      <td>21.430862</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>2</td>
      <td>20.932470</td>
      <td>15.259192</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>3</td>
      <td>17.989950</td>
      <td>11.353888</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>4</td>
      <td>15.402375</td>
      <td>8.668013</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>5</td>
      <td>13.202624</td>
      <td>6.830383</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>6</td>
      <td>11.358438</td>
      <td>5.623485</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>7</td>
      <td>9.841968</td>
      <td>4.950937</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>8</td>
      <td>8.626709</td>
      <td>4.664057</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>9</td>
      <td>7.678516</td>
      <td>4.614231</td>
      <td>00:00</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_03_09_模型的解释/23_03_09_模型的解释_files/figure-html/cell-9-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>更新:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">from</span> plotly <span class="im" style="color: #00769E;">import</span> graph_objects <span class="im" style="color: #00769E;">as</span> go</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;">class</span> GradShowCallback(Callback):</span>
<span id="cb12-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>,l<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, show<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>):</span>
<span id="cb12-3">        <span class="va" style="color: #111111;">self</span>.grad_list <span class="op" style="color: #5E5E5E;">=</span> L() <span class="cf" style="color: #003B4F;">if</span> l <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="cf" style="color: #003B4F;">else</span> l</span>
<span id="cb12-4">        <span class="va" style="color: #111111;">self</span>.show <span class="op" style="color: #5E5E5E;">=</span> show</span>
<span id="cb12-5">        </span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;">def</span> before_step(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb12-7">        grads <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb12-8">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.learn.model.parameters():</span>
<span id="cb12-9">            <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> i.grad <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb12-10">                grads.append(to_detach(i.grad.<span class="bu" style="color: null;">abs</span>().mean()))</span>
<span id="cb12-11">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb12-12">                grads.append(tensor(<span class="fl" style="color: #AD0000;">0.</span>))</span>
<span id="cb12-13">        <span class="va" style="color: #111111;">self</span>.grad_list.append(grads)</span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="kw" style="color: #003B4F;">def</span> after_fit(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb12-16">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">self</span>.show:</span>
<span id="cb12-17">            <span class="cf" style="color: #003B4F;">return</span></span>
<span id="cb12-18">        fig <span class="op" style="color: #5E5E5E;">=</span> go.Figure()</span>
<span id="cb12-19">        name <span class="op" style="color: #5E5E5E;">=</span> [name <span class="cf" style="color: #003B4F;">for</span> name, _ <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.learn.model.named_parameters()]</span>
<span id="cb12-20">        arr <span class="op" style="color: #5E5E5E;">=</span> array(<span class="va" style="color: #111111;">self</span>.grad_list).T</span>
<span id="cb12-21">        x <span class="op" style="color: #5E5E5E;">=</span> np.arange(<span class="bu" style="color: null;">len</span>(<span class="va" style="color: #111111;">self</span>.grad_list))</span>
<span id="cb12-22">        <span class="cf" style="color: #003B4F;">for</span> a,n <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(arr, name):</span>
<span id="cb12-23">            fig.add_trace(go.Scatter(x<span class="op" style="color: #5E5E5E;">=</span>x, y<span class="op" style="color: #5E5E5E;">=</span>a, name<span class="op" style="color: #5E5E5E;">=</span>n))</span>
<span id="cb12-24">        fig.show()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">learner <span class="op" style="color: #5E5E5E;">=</span> synth_learner()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">learner.fit_one_cycle(<span class="dv" style="color: #AD0000;">10</span>, cbs<span class="op" style="color: #5E5E5E;">=</span>GradShowCallback(l))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>15.332655</td>
      <td>15.399384</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>1</td>
      <td>14.451164</td>
      <td>12.325535</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>2</td>
      <td>12.793344</td>
      <td>8.908071</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>3</td>
      <td>11.070920</td>
      <td>6.616061</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>4</td>
      <td>9.531049</td>
      <td>5.079659</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>5</td>
      <td>8.209394</td>
      <td>4.044551</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>6</td>
      <td>7.098516</td>
      <td>3.371369</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>7</td>
      <td>6.185102</td>
      <td>2.984177</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>8</td>
      <td>5.451753</td>
      <td>2.818964</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>9</td>
      <td>4.879062</td>
      <td>2.789715</td>
      <td>00:00</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<div>                            <div id="6c271c3c-676c-4a9a-ba3e-3df0a3fb7d29" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("6c271c3c-676c-4a9a-ba3e-3df0a3fb7d29")) {                    Plotly.newPlot(                        "6c271c3c-676c-4a9a-ba3e-3df0a3fb7d29",                        [{"name":"a","x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699],"y":[5.844288,6.235748,4.812072,5.3251286,13.593681,5.9145513,8.674043,8.487517,8.34557,2.7604666,9.90152,2.5084987,3.7853985,11.917833,5.36526,4.6942496,7.6024513,6.424404,5.232995,7.9967613,6.4778004,5.503187,5.3596716,10.4488945,4.110065,3.3481562,5.363847,9.054249,1.8338876,3.8449419,2.6693714,2.6187766,2.7774668,3.2223167,6.0363975,7.354199,6.3123198,6.076951,4.0528245,4.239873,3.6552124,2.2694762,1.9758661,1.5509039,5.6492643,2.974224,3.776509,7.3495383,3.6912792,5.437896,1.2574112,0.41116834,2.5507884,4.008825,4.9603186,3.072488,3.5782642,6.5211973,3.7331712,2.954993,3.1078444,4.8238974,1.9736283,4.005552,2.600479,3.612087,1.2554858,2.965746,2.0227954,2.9797149,2.3561122,2.7062826,4.197813,3.4682846,2.5176954,0.26557946,3.1792374,3.6382906,1.750054,2.392691,2.4405525,5.6543765,2.402479,1.586024,1.2293135,2.3736203,2.6843343,0.75614387,4.2374277,1.6326134,2.1596158,0.8720994,4.950841,1.2961354,4.6062756,1.7362976,2.219707,1.4799441,3.4826581,1.6446184,2.2674532,0.24569923,2.886733,1.6915404,0.4214329,3.3046112,2.0520632,6.296673,1.3969246,1.6583364,0.72339064,1.3684983,3.418929,2.5817742,1.3337891,0.98757803,2.5201507,2.0651243,2.8801966,2.8270879,5.0059266,2.5296693,2.3023767,0.41752017,0.5382877,0.6076439,3.7238026,0.60875857,0.28403527,1.6040752,3.1764226,2.0761034,2.0000708,0.5745768,0.2429532,2.0946903,2.4824471,1.8529202,0.16566919,0.5162131,0.008073278,1.0881531,1.1149931,2.1697748,1.5159187,1.0707164,0.50994706,1.6405033,1.591243,2.1708934,2.204475,1.0150259,1.4127432,2.5255537,0.56807995,0.59696186,0.42482108,1.4862401,0.37569538,0.20187987,1.6053913,0.6867201,0.99663794,1.5271033,0.36594167,0.25209895,1.0342149,0.9147096,0.18899934,1.3348314,1.6264368,1.4958687,0.4754625,0.17454362,0.62149704,1.7912202,0.39887196,0.84416115,0.064504944,0.7454936,0.5102026,1.5836015,1.6698648,0.6686516,0.8845173,0.50459874,0.7915868,0.35950562,0.09299364,0.7363821,0.4925404,0.45160553,1.223831,0.28220806,0.11360829,0.7450046,0.14539263,1.2441814,1.859421,1.4330169,1.4283739,0.8983474,0.08542166,0.39151075,0.9942005,0.16244572,0.77737796,1.3427088,0.7713683,0.61080873,1.4171879,1.1867778,0.7244632,1.3962281,0.08252012,0.8780396,0.97870696,0.2727636,0.71827966,0.42698145,0.3612526,0.64544153,0.7068986,0.3762873,0.5511474,0.0002500564,0.758568,0.73949933,0.2894317,0.39412832,0.30133402,0.47264445,0.4388253,0.7714632,0.20801705,0.4269117,0.05932615,0.09819716,0.99179,0.17208038,0.7510153,0.5970582,0.09743968,0.14791654,0.8811581,0.20564015,0.54433006,0.4462477,0.12022728,0.21154483,0.48047343,0.11163446,0.0012638122,0.69971716,0.14051715,0.2874542,0.17306909,0.33651656,0.01302395,0.67002755,0.11460767,0.19724572,0.28319067,0.53807724,0.42401707,0.22162262,0.28910682,0.30414736,0.27155948,0.101429,0.22059079,0.15219387,0.29364163,0.23108049,0.096101254,0.16178493,0.17701542,0.2486488,0.2162128,0.45987695,0.12690751,0.10336389,0.118150696,0.17303982,0.38170958,0.1379733,0.42816454,0.31348652,0.29496574,0.07421915,0.28012928,0.4760484,0.54986346,0.23126768,0.012644179,0.16385296,0.49790046,0.23912606,0.2379027,0.037543155,3.5074894,3.7560432,1.5780288,3.9439363,2.477574,3.4723694,5.712942,2.4557981,0.7182237,1.9820924,5.992634,4.9780264,3.2551663,2.632099,1.9035867,0.61305815,2.9877353,0.88709974,5.241257,0.86437,1.3402373,3.6001198,3.1386986,1.0276551,0.37964225,2.1605496,6.486452,2.5113335,0.81491506,2.7057323,3.2110581,1.9767443,2.8921566,3.904529,5.1474442,0.40725985,1.6614764,1.7252798,0.82484466,0.014170125,1.0503118,1.6250533,0.20091629,3.1444297,3.0163517,1.9391074,2.807463,0.83556813,1.4857846,2.062585,0.97680783,0.36771566,0.8985453,2.6757169,2.8808894,1.4274571,1.9982582,1.9928837,0.65199697,1.8653277,1.470087,1.5505931,0.6302753,1.2130442,0.4832827,0.9291947,3.492797,0.8864865,1.9480789,1.5653076,1.108174,1.8780189,1.6477203,1.0708237,1.5781448,1.7765759,1.9305186,0.7267459,0.13687746,1.3085413,1.0534103,0.7510295,0.7498196,1.9433706,1.3155814,0.92565274,1.5726284,2.4215941,0.50565064,1.255325,0.5866893,2.5401318,0.37615243,0.531744,0.7404896,0.6023517,2.821785,2.7716117,1.1748545,0.14689599,5.4434214,2.7262707,3.4770992,2.2325044,1.2171084,5.7188735,4.1269946,0.032598466,7.0806484,1.261918,3.1120996,0.48904246,5.7873974,9.462886,3.0763192,1.445822,0.93026686,3.9678922,1.7442088,1.5193621,3.322061,6.727019,3.672725,0.53696775,5.184072,2.7702436,1.5354022,0.8096217,2.326806,0.57317716,1.0520344,2.3665884,1.5989739,3.6994622,3.5288944,2.4220695,1.0769932,0.72576284,2.5702178,3.7343845,0.027528077,2.7372677,3.2671118,0.26935232,2.4345124,1.824917,2.5730548,3.3084478,1.1005467,2.7967548,0.71645796,0.13213047,1.3227767,0.17942762,2.5214276,1.6736115,3.0311873,3.7166884,2.4231162,2.81827,0.18690023,2.3092837,0.4766304,1.9923209,1.2597524,0.88534325,2.1422744,1.7794436,2.2014918,3.6520586,0.18669334,3.9762573,0.3693431,2.573224,0.77041924,2.1274092,2.324765,0.90405875,0.85354155,1.8484626,1.3733666,0.51410437,2.1459296,2.2931504,0.09347277,0.28225636,3.1545746,1.3367372,2.0590749,2.1930103,2.3064444,1.5199792,1.104417,2.0491996,0.4664633,1.234052,1.39291,2.3849463,2.1027007,0.50395834,3.134684,0.5944983,1.9931383,6.530224,2.9657512,2.49907,0.21985045,2.8634698,3.4109058,3.7367897,1.1379148,4.406992,1.2953703,2.5776038,3.3202167,5.4243226,1.8217186,2.6883707,3.7548482,0.55596614,1.8190744,4.329898,1.021319,3.3041756,1.5756502,1.4868759,4.487406,3.5478244,0.9336605,1.9138265,1.6655269,1.7405058,2.036336,0.5024221,2.9716046,3.356205,2.469903,2.7365358,1.3764428,3.1209545,1.1139178,0.5373162,2.3483534,2.4620035,2.7277155,2.2865732,0.9415404,2.782027,2.0858634,2.7481341,3.3241708,3.2806413,0.81075954,1.9440275,1.210465,1.093037,0.48481286,1.369905,2.0023487,2.9632716,4.376056,1.0376778,0.59999645,1.165812,1.4877222,2.0478892,2.7468395,1.3988618,2.335772,0.014427021,0.34763527,1.6336887,1.3360713,1.881764,1.4574413,1.2593484,4.094138,1.6050739,0.9260878,1.639837,2.5789971,0.067701235,2.3425028,1.6623899,1.5880563,0.028265998,0.4870922,0.8972293,2.613477,3.431941,1.0547571,1.3391678,1.9441704,2.181244,1.2109,0.38032442,0.5081664,1.9076746,0.792603,4.210551,0.11389105,2.2664256,0.056778014,0.7269025,1.9311354,2.4822686,1.0614882,0.5017291,0.65080667,3.3153858,1.3217368,1.2027242,0.28047624,0.36237836,0.15575409,0.20716804,0.54688406,0.43596888,3.401032,0.98795885,1.8887784,0.9753567,1.9973056,2.6086252,0.89054114,1.5737982,1.0574222,0.4246095,0.5146601,0.124097645,1.8953447,0.44083348,2.824861,1.1962337,1.5093672,0.17405695,0.01916793,0.37395716,1.8213212,1.1288557,0.9179437,0.37323254,1.2691169,0.51550573,0.04328847,1.607514,1.8785219,0.11722216,0.95091236,0.7172677,1.0521071,0.71294177,1.2630029,0.9721796,0.8902693,1.128559,0.6090132,1.1697125,1.4774194,0.7052972,0.10565875,0.8370436,1.4626769,0.47121137,0.12491148,0.805861,0.12785633,0.091113344,0.90866864,1.7441778,1.4406985,0.45076415,0.44133595,0.10957944,0.44755256,1.1151848,0.6536635,1.5943197,0.21873763,0.024659425,0.23268855,0.3072959,0.2023251,0.16478065,0.1780962,1.3778211,0.092286155,0.5715421,0.18459499,0.15101421,0.24406578,1.2151717,0.40847263,0.8447899,0.022020847,0.060685344,0.033273906,0.82451594,1.1129115,0.90772736],"type":"scatter"},{"name":"b","x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699],"y":[7.5597816,9.380594,7.2951274,6.257698,9.425408,7.182333,7.5617743,7.1527424,8.680039,6.2080226,8.853506,5.3440304,6.3685126,10.731194,7.3559017,7.913302,7.443497,5.3430147,7.7839985,5.749176,6.4138,6.8162236,7.5314274,8.954349,5.5871625,4.543241,5.2362237,7.196641,5.2147036,6.070811,4.245985,4.2143283,5.6050415,6.559258,4.756922,6.1514363,6.109025,5.786441,5.1142483,5.9766436,4.702263,4.207883,3.1812778,3.9024098,5.8035655,4.8071117,5.542105,5.3955307,4.3988895,5.7686496,3.5535817,3.720837,4.4924088,3.656815,4.7608857,4.561941,4.3560286,4.365436,4.58007,4.350989,2.918486,3.9290519,3.8523011,4.7419777,3.5302513,4.2986026,3.2689095,3.9397082,4.2258725,3.652914,2.3556876,3.6648383,4.8873253,4.185544,3.200325,3.014622,4.0029,3.9037623,3.4666526,2.9283323,3.3621264,3.9173462,3.4298296,3.036213,2.8287644,3.4194365,3.6252098,3.284216,4.352868,2.7906525,3.9534132,2.7593846,4.1224375,2.8459535,3.854998,2.3694146,3.3759978,3.0661013,4.260089,2.8883808,5.0006137,4.162025,5.2031054,4.6589546,4.665484,5.459017,5.156707,6.216196,5.009449,4.568313,4.6911716,4.7261324,5.348611,4.6477404,4.6343193,4.317687,5.0424395,4.4315734,5.027047,4.4864697,5.4538593,4.715171,4.618214,3.7717245,3.6549037,3.733035,4.406315,3.5842264,3.2698772,3.8326004,4.2310467,3.915656,3.7244303,3.5210848,2.8585951,3.4887862,3.7094064,3.587708,2.8203127,2.992283,2.82298,3.123689,2.967296,3.178169,3.3137665,2.8772688,2.470147,3.0812879,3.1315362,3.1175969,2.9516604,2.8316355,2.932184,3.0412862,2.526073,2.5968156,2.444426,2.7538497,2.3639388,2.103416,2.7579138,2.5358763,2.2859635,2.5494785,2.3052354,2.145799,2.321586,2.2122571,2.233101,2.4230661,2.3872576,2.4518056,1.9748356,2.0952039,2.1825213,2.407669,2.096251,2.221124,1.9868084,2.140119,2.10106,2.241343,2.3566375,2.093407,1.9132679,2.047731,2.1489081,2.0439866,1.9811537,1.999224,2.0270803,2.0173507,2.1859682,1.6304772,1.9736147,2.0682425,1.9879051,2.2304995,2.3073492,2.132366,2.1977305,2.082741,1.8220019,1.905399,2.1450894,1.816526,2.0276856,2.1241727,2.0970764,2.0375984,2.119061,2.0507782,1.9947691,2.0044758,1.685221,1.8128573,1.8696723,1.4733617,1.712029,1.4540194,1.5124558,1.6169776,1.6718925,1.4692659,1.578722,1.389437,1.443002,1.4617065,1.2621915,1.259042,1.2730536,1.2850593,1.1666217,1.3622833,1.1834922,1.288937,1.0820191,1.0727494,1.2992599,1.1846879,1.203224,1.1603957,0.91931605,1.0952584,1.0893751,0.96497047,1.070776,1.1080484,0.88707876,0.994573,0.97908056,0.85459405,0.900329,1.0095367,0.8426864,0.9325118,0.8207065,0.99454457,0.8868495,0.9830908,0.82629544,0.7670379,0.8305215,0.98628706,0.85726583,0.6882238,0.857416,0.8722818,0.74995744,0.8348974,0.76549345,0.8247099,0.7844746,0.84475446,0.69741714,0.7709722,0.740631,0.71396023,0.7126073,0.78257763,0.71179646,0.7510804,0.7440275,0.7299787,0.7939507,0.705565,0.77814317,0.658797,0.7104632,0.70042133,0.73195565,0.83440846,0.7071381,0.7047501,0.7006895,0.6158595,0.80489874,0.7091525,0.71888626,0.635093,5.860318,7.5017557,6.8616023,7.4632435,6.7853184,6.94499,7.5177693,6.492169,6.225853,6.3639445,7.69598,7.1309357,6.24414,6.7988358,6.451785,5.1284575,6.9097333,5.459755,7.2229195,5.458061,6.067858,6.2436357,5.8508844,5.326993,4.837176,5.4503818,6.336497,5.6885047,4.545522,5.639136,5.6590567,5.0950265,4.816521,5.6235723,6.176795,3.6384442,4.767157,4.412955,4.2151456,3.7165935,4.391451,4.4820867,3.7928805,4.643091,4.6426744,3.8618197,4.7189593,3.813684,3.82014,3.553553,3.602683,3.6462953,3.4069161,3.9549217,4.1301036,3.8629775,3.549299,3.802455,3.0707786,3.806235,3.4676962,3.27275,3.0362947,3.4202642,3.0569122,3.3489373,3.7090902,3.0819893,3.642942,3.1760335,3.205384,3.1485846,3.1312356,3.063406,2.9973264,3.2225177,3.1859539,2.9499426,2.7321105,3.1341898,3.1629577,2.8046682,2.637558,3.223422,3.023736,2.7918,3.1265023,3.0803437,2.7854621,2.7502851,2.6268852,3.476877,2.5683508,2.5833387,2.526492,2.5232582,3.5649185,3.3495827,2.8864975,2.7926948,8.32325,7.738082,8.027631,6.988305,5.4354534,8.17021,8.22199,6.5743446,9.229126,6.8375893,7.963339,6.7078514,8.552013,9.413013,6.648445,6.1989117,5.603503,7.72856,6.0163994,6.859355,7.122301,8.02289,7.189026,5.1370087,7.4064064,5.719787,5.974418,5.368922,5.1642385,5.2818127,5.4860883,5.649892,4.712667,6.0633745,6.3165164,5.4150662,4.416564,4.928216,4.836175,5.5848727,4.0998483,4.9847856,5.090762,4.389293,4.880514,4.811293,4.6922917,4.8996873,3.6457784,5.057153,4.320767,3.1843934,3.9555733,3.6208727,4.3785915,3.9541316,4.650169,4.1744103,4.647584,4.2764654,3.442522,4.1117954,3.177876,3.47324,3.6023927,3.432275,4.074675,3.5642962,4.1052732,4.207805,3.112575,4.0391827,2.9181101,3.939783,3.3365746,3.4938917,3.6236744,3.0433981,3.2644875,3.7125516,3.356381,2.866099,3.77642,3.5892687,2.6356235,2.4320443,3.6761036,3.1854815,3.675756,3.7523525,3.492065,3.0460958,3.1219752,3.691526,3.077305,3.089135,3.3779283,3.3336332,3.2869568,2.8988123,6.001121,5.721906,4.9371157,7.353783,6.748244,5.533546,4.638751,6.4624805,7.517992,6.3211412,5.3136077,7.0353227,5.4904757,6.617086,6.105797,5.996136,4.5909004,5.8976407,6.1841793,4.890485,4.521723,5.9255786,4.505479,5.433833,4.420814,5.161901,5.5352697,5.4220343,4.1551986,5.51224,3.9307244,5.0140095,4.798928,3.660374,4.960659,4.7073746,4.7763276,3.8224251,3.738387,4.2079787,3.8136446,3.3737507,4.5276384,3.915292,3.898289,4.058661,3.6375742,3.3817272,3.2692997,4.155918,3.8811853,3.7037132,3.131532,4.018857,3.326729,2.9706683,2.9048803,3.358307,2.3575647,4.05897,4.31397,2.8539145,2.433006,3.0268354,3.23655,3.138766,3.415666,2.729495,3.4706926,1.8654444,2.814943,3.1588616,2.566854,3.1482627,2.5737538,2.865957,3.75905,2.158285,2.2771127,2.9207168,2.890843,2.124693,2.7554352,2.7755377,2.8233628,1.969877,1.9482507,2.4037192,3.3920166,3.92623,2.1372268,2.6299167,2.5825803,3.4679427,2.9341896,2.3567839,2.3799803,2.181669,2.402054,3.523031,7.7520037,8.063163,7.8684483,7.8078427,7.6972895,7.8358355,7.765831,7.8832316,7.6903834,7.870343,7.7539043,7.7328973,7.5869336,7.4929004,7.493227,7.396669,7.1471043,7.2070637,7.186608,7.1219153,7.024352,6.728298,6.6159215,6.725329,6.4103856,6.4403205,6.311273,6.081427,6.0354466,5.9486403,5.993275,5.741811,5.775037,5.6465087,5.4805045,5.480507,5.4055433,5.249898,5.1516023,5.1502,5.060766,4.8914475,4.9217644,4.8079395,4.83147,4.822444,4.691473,4.599535,4.600218,4.606306,4.501627,4.2702875,4.2707577,4.3390207,4.288262,4.1645217,4.1397743,4.082275,4.1018662,4.0525503,3.982442,4.0268507,3.9955814,3.8169498,3.8361757,3.695425,3.6113055,3.7569203,3.6529186,3.6336915,3.6621547,3.6819484,3.501008,3.5017056,3.5054574,3.5287926,3.4569595,3.3880045,3.5039816,3.433306,3.435243,3.488531,3.2880454,3.3740737,3.2806299,3.3329256,3.4654775,3.3238575,3.3484175,3.2400782,3.293462,3.36057,3.3414836,3.2691014,3.2955074,3.2621045,3.3504934,3.2498317,3.321604,3.2760565],"type":"scatter"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('6c271c3c-676c-4a9a-ba3e-3df0a3fb7d29');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://doucx.github.io/blog/blog/posts/23_03_09_模型的解释/03_09_模型的解释.html</guid>
  <pubDate>Thu, 09 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>WcpDToolBox</title>
  <dc:creator>Doucx</dc:creator>
  <link>https://doucx.github.io/blog/blog/posts/23_03_08_wcpdtoolbox/03_08_wcpdtoolbox.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="section" class="level1">
<h1>23_03_08</h1>
<section id="wcpdtoolbox" class="level2">
<h2 class="anchored" data-anchor-id="wcpdtoolbox">WcpDToolBox</h2>
<p>制作了一组工具包,为了美好的生活</p>
</section>
<section id="vim" class="level2">
<h2 class="anchored" data-anchor-id="vim">Vim</h2>
<p>使用<code>Vim-Plug</code>安装了一些插件,vim变得更好看了</p>


</section>
</section>

 ]]></description>
  <guid>https://doucx.github.io/blog/blog/posts/23_03_08_wcpdtoolbox/03_08_wcpdtoolbox.html</guid>
  <pubDate>Wed, 08 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>人声增强</title>
  <dc:creator>Doucx</dc:creator>
  <link>https://doucx.github.io/blog/blog/posts/23_01_06_unet噪音去除/01_06_unet噪音去除.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> fastai.text.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> fastai.collab <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> fastai.tabular.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> glob</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> pydub <span class="im" style="color: #00769E;">import</span> AudioSegment</span></code></pre></div>
</div>
<section id="人声增强" class="level1">
<h1>人声增强</h1>
<p>目标:从一段音频中增强人声</p>
<section id="人声读取" class="level2">
<h2 class="anchored" data-anchor-id="人声读取">人声读取</h2>
<section id="位置" class="level3">
<h3 class="anchored" data-anchor-id="位置">位置</h3>
<p>利用glob获取每一个data的位置</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">voiceset <span class="op" style="color: #5E5E5E;">=</span> L(glob.glob(<span class="st" style="color: #20794D;">'/ailearn/own/daily/dataset/dataset/voice_dataset/cv-corpus-11.0-delta-2022-09-21/en/clips/*.mp3'</span>))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">voiceset[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'/ailearn/own/daily/dataset/dataset/voice_dataset/cv-corpus-11.0-delta-2022-09-21/en/clips/common_voice_en_34451548.mp3'</code></pre>
</div>
</div>
</section>
<section id="读取" class="level3">
<h3 class="anchored" data-anchor-id="读取">读取</h3>
<p>使用pydub读取声音</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">mp3 <span class="op" style="color: #5E5E5E;">=</span> AudioSegment.from_mp3(voiceset[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">mp3</span></code></pre></div>
<div class="cell-output cell-output-display">

                    <audio controls="">
                        <source src="data:audio/mpeg;base64," type="audio/mpeg">
                        Your browser does not support the audio element.
                    </audio>
                  
</div>
</div>
<p>读取成功</p>
</section>
<section id="转换" class="level3">
<h3 class="anchored" data-anchor-id="转换">转换</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">arr <span class="op" style="color: #5E5E5E;">=</span> np.frombuffer(mp3.raw_data, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'int16'</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">plt.plot(arr)</span>
<span id="cb10-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_01_06_unet噪音去除/23_01_06_unet噪音去除_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">mp3.frame_rate</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>32000</code></pre>
</div>
</div>
</section>
<section id="组合" class="level3">
<h3 class="anchored" data-anchor-id="组合">组合</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;">def</span> getmp3raw(path):</span>
<span id="cb13-2">    mp3 <span class="op" style="color: #5E5E5E;">=</span> AudioSegment.from_mp3(path).set_frame_rate(<span class="dv" style="color: #AD0000;">32000</span>)</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;">return</span> np.frombuffer(mp3.raw_data, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'int16'</span>)<span class="co" style="color: #5E5E5E;">#,mp3.frame_rate</span></span></code></pre></div>
</div>
</section>
<section id="导出" class="level3">
<h3 class="anchored" data-anchor-id="导出">导出</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> exportwav(name, rate, arr):</span>
<span id="cb14-2">    arr.astype(np.int16)</span>
<span id="cb14-3">    scipy.io.wavfile.write(name, rate, arr)</span></code></pre></div>
</div>
</section>
</section>
<section id="环境声提取" class="level2">
<h2 class="anchored" data-anchor-id="环境声提取">环境声提取</h2>
<section id="位置-1" class="level3">
<h3 class="anchored" data-anchor-id="位置-1">位置</h3>
<p>使用ESC-50数据集</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">voiceset2 <span class="op" style="color: #5E5E5E;">=</span> L(glob.glob(<span class="st" style="color: #20794D;">'/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/*.wav'</span>))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">voiceset2</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#2000) ['/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/4-195707-A-13.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/3-187710-A-11.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/4-204777-C-39.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/2-135649-A-45.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/1-90797-A-15.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/4-181955-A-3.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/1-22694-A-20.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/4-119648-D-48.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/1-56380-B-5.wav','/ailearn/own/daily/dataset/dataset/voice_dataset/ESC-50-master/audio/2-83536-A-27.wav'...]</code></pre>
</div>
</div>
</section>
<section id="读取函数" class="level3">
<h3 class="anchored" data-anchor-id="读取函数">读取函数</h3>
<p>这边把所有文件都变成32000的采样率</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;">def</span> getwavraw(path):</span>
<span id="cb18-2">    wav <span class="op" style="color: #5E5E5E;">=</span> AudioSegment.from_wav(path).set_frame_rate(<span class="dv" style="color: #AD0000;">32000</span>)</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;">return</span> np.frombuffer(wav.raw_data, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'int16'</span>)<span class="co" style="color: #5E5E5E;">#,wav.frame_rate</span></span></code></pre></div>
</div>
</section>
</section>
<section id="声音合成" class="level2">
<h2 class="anchored" data-anchor-id="声音合成">声音合成</h2>
<p>将两段声音加起来,就是叠加了</p>
<p>这个函数输入两个数组,返回相同长度的三个数组</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">def</span> getsumvoice(voice0,voice1):</span>
<span id="cb19-2">    a <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(voice0)</span>
<span id="cb19-3">    b <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(voice1)</span>
<span id="cb19-4">    <span class="cf" style="color: #003B4F;">if</span> a<span class="op" style="color: #5E5E5E;">&gt;</span>b:</span>
<span id="cb19-5">        voice0 <span class="op" style="color: #5E5E5E;">=</span> voice0[:b]</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb19-7">        voice1 <span class="op" style="color: #5E5E5E;">=</span> voice1[:a]</span>
<span id="cb19-8">    voice2 <span class="op" style="color: #5E5E5E;">=</span> voice1<span class="op" style="color: #5E5E5E;">+</span>voice0</span>
<span id="cb19-9">    </span>
<span id="cb19-10">    <span class="cf" style="color: #003B4F;">return</span> voice0,voice1,voice2</span></code></pre></div>
</div>
</section>
<section id="播放numpy" class="level2">
<h2 class="anchored" data-anchor-id="播放numpy">播放numpy</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;">def</span> playarr(arr,rate<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32000</span>):</span>
<span id="cb20-2">    arr <span class="op" style="color: #5E5E5E;">=</span> array(arr)</span>
<span id="cb20-3">    arr <span class="op" style="color: #5E5E5E;">=</span> arr.astype(np.int16)</span>
<span id="cb20-4">    exportwav(<span class="st" style="color: #20794D;">'temp/test.wav'</span>,rate,arr)</span>
<span id="cb20-5">    <span class="cf" style="color: #003B4F;">return</span> AudioSegment.from_wav(<span class="st" style="color: #20794D;">'temp/test.wav'</span>)</span></code></pre></div>
</div>
</section>
<section id="训练" class="level2">
<h2 class="anchored" data-anchor-id="训练">训练</h2>
<section id="随机生成拼合数据" class="level3">
<h3 class="anchored" data-anchor-id="随机生成拼合数据">随机生成拼合数据</h3>
<p>它的输出需要为频谱图,也就是进行stft处理</p>
<p>并且,长宽得可以整除除32</p>
<p>并且,需要变成同一大小以方便处理</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">def</span> getrandsum(num, vset0<span class="op" style="color: #5E5E5E;">=</span>voiceset, vset1<span class="op" style="color: #5E5E5E;">=</span>voiceset2):</span>
<span id="cb21-2">    k <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(num):</span>
<span id="cb21-4">        <span class="co" style="color: #5E5E5E;"># 随机生成数字</span></span>
<span id="cb21-5">        i <span class="op" style="color: #5E5E5E;">=</span> random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">len</span>(vset0)<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb21-6">        j <span class="op" style="color: #5E5E5E;">=</span> random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">len</span>(vset1)<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb21-7">        <span class="co" style="color: #5E5E5E;"># 获取数据</span></span>
<span id="cb21-8">        arr0 <span class="op" style="color: #5E5E5E;">=</span> getmp3raw(vset0[i]).astype(np.float32())</span>
<span id="cb21-9">        arr1 <span class="op" style="color: #5E5E5E;">=</span> getwavraw(vset1[j]).astype(np.float32())</span>
<span id="cb21-10">        arr0, arr1, arr2 <span class="op" style="color: #5E5E5E;">=</span> getsumvoice(arr0, arr1)</span>
<span id="cb21-11">        <span class="co" style="color: #5E5E5E;"># 生成</span></span>
<span id="cb21-12">        arr0 <span class="op" style="color: #5E5E5E;">=</span> tensor(arr0.copy()).reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb21-13">        arr2 <span class="op" style="color: #5E5E5E;">=</span> tensor(arr2.copy()).reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb21-14"></span>
<span id="cb21-15">        arr0 <span class="op" style="color: #5E5E5E;">=</span> torch.stft(arr0, <span class="dv" style="color: #AD0000;">511</span>, return_complex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb21-16">        arr2 <span class="op" style="color: #5E5E5E;">=</span> torch.stft(arr2, <span class="dv" style="color: #AD0000;">511</span>, return_complex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb21-17"></span>
<span id="cb21-18">        o <span class="op" style="color: #5E5E5E;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">1344</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb21-19">        p <span class="op" style="color: #5E5E5E;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">1344</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb21-20"></span>
<span id="cb21-21">        <span class="cf" style="color: #003B4F;">if</span> arr0.shape[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1344</span>:</span>
<span id="cb21-22">            <span class="co" style="color: #5E5E5E;">#print(arr0.shape[1])</span></span>
<span id="cb21-23">            o[:, :arr0.shape[<span class="dv" style="color: #AD0000;">1</span>]] <span class="op" style="color: #5E5E5E;">=</span> arr0</span>
<span id="cb21-24">            p[:, :arr0.shape[<span class="dv" style="color: #AD0000;">1</span>]] <span class="op" style="color: #5E5E5E;">=</span> arr2</span>
<span id="cb21-25">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb21-26">            <span class="co" style="color: #5E5E5E;">#print(arr0.shape[1])</span></span>
<span id="cb21-27">            o <span class="op" style="color: #5E5E5E;">=</span> arr0[:, :<span class="dv" style="color: #AD0000;">1344</span>]</span>
<span id="cb21-28">            p <span class="op" style="color: #5E5E5E;">=</span> arr2[:, :<span class="dv" style="color: #AD0000;">1344</span>]</span>
<span id="cb21-29">        <span class="co" style="color: #5E5E5E;"># arr0 = arr0[:, :-(arr0.shape[1] % 32), :]</span></span>
<span id="cb21-30">        <span class="co" style="color: #5E5E5E;"># arr2 = arr2[:, :-(arr2.shape[1] % 32), :]</span></span>
<span id="cb21-31"></span>
<span id="cb21-32">        k.append([o, p])</span>
<span id="cb21-33">    <span class="cf" style="color: #003B4F;">return</span> k</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">x <span class="op" style="color: #5E5E5E;">=</span> getrandsum(<span class="dv" style="color: #AD0000;">1</span>, voiceset,voiceset2)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">x[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([256, 1344, 2])</code></pre>
</div>
</div>
</section>
<section id="逆处理至音频" class="level3">
<h3 class="anchored" data-anchor-id="逆处理至音频">逆处理至音频</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">destft <span class="op" style="color: #5E5E5E;">=</span> (<span class="kw" style="color: #003B4F;">lambda</span> x:torch.istft(x, <span class="dv" style="color: #AD0000;">511</span>,return_complex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>))</span></code></pre></div>
</div>
</section>
<section id="生成数据集" class="level3">
<h3 class="anchored" data-anchor-id="生成数据集">生成数据集</h3>
<p>使用fastai的数据块</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">dl <span class="op" style="color: #5E5E5E;">=</span> DataBlock(</span>
<span id="cb26-2">    get_items<span class="op" style="color: #5E5E5E;">=</span>getrandsum,</span>
<span id="cb26-3">    get_x<span class="op" style="color: #5E5E5E;">=</span>(<span class="kw" style="color: #003B4F;">lambda</span> x:x[<span class="dv" style="color: #AD0000;">1</span>]),</span>
<span id="cb26-4">    get_y<span class="op" style="color: #5E5E5E;">=</span>(<span class="kw" style="color: #003B4F;">lambda</span> x:x[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb26-5">)</span></code></pre></div>
</div>
</section>
<section id="检查数据" class="level3">
<h3 class="anchored" data-anchor-id="检查数据">检查数据</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">x <span class="op" style="color: #5E5E5E;">=</span> dls.dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">y <span class="op" style="color: #5E5E5E;">=</span> dls.dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">plt.plot(destft(x))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_364/968818733.py:1: UserWarning: istft will require a complex-valued input tensor in a future PyTorch release. Matching the output from stft with return_complex=True.  (Triggered internally at /var/lib/jenkins/pytorch/aten/src/ATen/native/SpectralOps.cpp:978.)
  destft = (lambda x:torch.istft(x, 511,return_complex=False))</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_01_06_unet噪音去除/23_01_06_unet噪音去除_files/figure-html/cell-26-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">plt.plot(destft(y))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_01_06_unet噪音去除/23_01_06_unet噪音去除_files/figure-html/cell-27-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">dls.dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([256, 1344, 2])</code></pre>
</div>
</div>
</section>
<section id="定义模型" class="level3">
<h3 class="anchored" data-anchor-id="定义模型">定义模型</h3>
<p>一个简单的Unet</p>
<p>目标:<br>
识别噪音 -&gt; 产生掩盖 -&gt; 相乘</p>
<p>因为Unet的特性,它应当可以识别到噪音的特征,并反向至目标</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;">class</span> Decoder(nn.Module):</span>
<span id="cb34-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, in_channels, middle_channels, out_channels):</span>
<span id="cb34-3">        <span class="bu" style="color: null;">super</span>(Decoder, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb34-4">        </span>
<span id="cb34-5">        <span class="va" style="color: #111111;">self</span>.up <span class="op" style="color: #5E5E5E;">=</span> nn.ConvTranspose2d(</span>
<span id="cb34-6">            in_channels, out_channels, kernel_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, stride<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb34-7">        </span>
<span id="cb34-8">        <span class="va" style="color: #111111;">self</span>.conv_relu <span class="op" style="color: #5E5E5E;">=</span> nn.Sequential(</span>
<span id="cb34-9">            nn.Conv2d(middle_channels, out_channels, kernel_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb34-10">            nn.ReLU(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb34-11">        )</span>
<span id="cb34-12"></span>
<span id="cb34-13">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x1, x2):</span>
<span id="cb34-14">        </span>
<span id="cb34-15">        x1 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.up(x1)</span>
<span id="cb34-16">        <span class="co" style="color: #5E5E5E;"># print(x1.shape,x2.shape)</span></span>
<span id="cb34-17">        x1 <span class="op" style="color: #5E5E5E;">=</span> torch.cat((x1, x2), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb34-18">        x1 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.conv_relu(x1)</span>
<span id="cb34-19">        <span class="cf" style="color: #003B4F;">return</span> x1</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;">import</span> torchvision</span></code></pre></div>
</div>
<p>注意:下采样时需要使输出为偶数尺寸</p>
<p>并且最好在输入数据时进行标准化-对数缩放</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;">class</span> Unet(nn.Module):</span>
<span id="cb36-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb36-3">        <span class="bu" style="color: null;">super</span>(Unet, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb36-4"></span>
<span id="cb36-5">        <span class="va" style="color: #111111;">self</span>.base_model <span class="op" style="color: #5E5E5E;">=</span> torchvision.models.resnet18(<span class="va" style="color: #111111;">True</span>)  <span class="co" style="color: #5E5E5E;"># 不使用预训练模型</span></span>
<span id="cb36-6">        <span class="va" style="color: #111111;">self</span>.base_layers <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="va" style="color: #111111;">self</span>.base_model.children())</span>
<span id="cb36-7"></span>
<span id="cb36-8">        <span class="va" style="color: #111111;">self</span>.layer1 <span class="op" style="color: #5E5E5E;">=</span> nn.Sequential(</span>
<span id="cb36-9">            nn.Conv2d(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">7</span>), stride<span class="op" style="color: #5E5E5E;">=</span>(  <span class="co" style="color: #5E5E5E;"># 数据有两个通道</span></span>
<span id="cb36-10">                <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>), padding<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>), bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>),</span>
<span id="cb36-11">            <span class="va" style="color: #111111;">self</span>.base_layers[<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb36-12">            <span class="va" style="color: #111111;">self</span>.base_layers[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb36-13"></span>
<span id="cb36-14">        <span class="va" style="color: #111111;">self</span>.layer2 <span class="op" style="color: #5E5E5E;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;">*</span><span class="va" style="color: #111111;">self</span>.base_layers[<span class="dv" style="color: #AD0000;">3</span>:<span class="dv" style="color: #AD0000;">5</span>])</span>
<span id="cb36-15">        <span class="va" style="color: #111111;">self</span>.layer3 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.base_layers[<span class="dv" style="color: #AD0000;">5</span>]</span>
<span id="cb36-16">        <span class="va" style="color: #111111;">self</span>.layer4 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.base_layers[<span class="dv" style="color: #AD0000;">6</span>]</span>
<span id="cb36-17">        <span class="va" style="color: #111111;">self</span>.layer5 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.base_layers[<span class="dv" style="color: #AD0000;">7</span>]</span>
<span id="cb36-18"></span>
<span id="cb36-19">        <span class="va" style="color: #111111;">self</span>.decode4 <span class="op" style="color: #5E5E5E;">=</span> Decoder(<span class="dv" style="color: #AD0000;">512</span>, <span class="dv" style="color: #AD0000;">256</span><span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">256</span>)</span>
<span id="cb36-20">        <span class="va" style="color: #111111;">self</span>.decode3 <span class="op" style="color: #5E5E5E;">=</span> Decoder(<span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">256</span><span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">256</span>)</span>
<span id="cb36-21">        <span class="va" style="color: #111111;">self</span>.decode2 <span class="op" style="color: #5E5E5E;">=</span> Decoder(<span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">128</span><span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">128</span>)</span>
<span id="cb36-22">        <span class="va" style="color: #111111;">self</span>.decode1 <span class="op" style="color: #5E5E5E;">=</span> Decoder(<span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">64</span>)</span>
<span id="cb36-23"></span>
<span id="cb36-24">        <span class="va" style="color: #111111;">self</span>.decode0 <span class="op" style="color: #5E5E5E;">=</span> nn.Sequential(</span>
<span id="cb36-25">            nn.Upsample(scale_factor<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bilinear'</span>, align_corners<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>),</span>
<span id="cb36-26">            nn.Conv2d(<span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>),</span>
<span id="cb36-27">            nn.Conv2d(<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb36-28">        )</span>
<span id="cb36-29"></span>
<span id="cb36-30">        <span class="va" style="color: #111111;">self</span>.conv_last <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)  <span class="co" style="color: #5E5E5E;"># 这边转换为二通道数据</span></span>
<span id="cb36-31"></span>
<span id="cb36-32">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, inp):</span>
<span id="cb36-33">        <span class="co" style="color: #5E5E5E;"># 输入: 1,257,1251,2</span></span>
<span id="cb36-34"></span>
<span id="cb36-35">        inp <span class="op" style="color: #5E5E5E;">=</span> inp.permute(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)  <span class="co" style="color: #5E5E5E;"># 输入: 1,2,257,1251</span></span>
<span id="cb36-36"></span>
<span id="cb36-37">        e1 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.layer1(</span>
<span id="cb36-38">            torch.log1p(inp.<span class="bu" style="color: null;">abs</span>())</span>
<span id="cb36-39">        )  <span class="co" style="color: #5E5E5E;"># 64,128,128</span></span>
<span id="cb36-40"></span>
<span id="cb36-41">        e2 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.layer2(e1)  <span class="co" style="color: #5E5E5E;"># 64,64,64</span></span>
<span id="cb36-42">        e3 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.layer3(e2)  <span class="co" style="color: #5E5E5E;"># 128,32,32</span></span>
<span id="cb36-43">        e4 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.layer4(e3)  <span class="co" style="color: #5E5E5E;"># 256,16,16</span></span>
<span id="cb36-44">        <span class="co" style="color: #5E5E5E;"># print(inp.shape)</span></span>
<span id="cb36-45">        <span class="co" style="color: #5E5E5E;"># print('e1',e1.shape)</span></span>
<span id="cb36-46">        <span class="co" style="color: #5E5E5E;"># print('e2',e2.shape)</span></span>
<span id="cb36-47">        <span class="co" style="color: #5E5E5E;"># print('e3',e3.shape)</span></span>
<span id="cb36-48">        <span class="co" style="color: #5E5E5E;"># print('e4',e4.shape)</span></span>
<span id="cb36-49">        f <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.layer5(e4)  <span class="co" style="color: #5E5E5E;"># 512,8,8</span></span>
<span id="cb36-50">        <span class="co" style="color: #5E5E5E;"># print(f.shape)</span></span>
<span id="cb36-51">        d4 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.decode4(f, e4)  <span class="co" style="color: #5E5E5E;"># 256,16,16</span></span>
<span id="cb36-52">        d3 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.decode3(d4, e3)  <span class="co" style="color: #5E5E5E;"># 256,32,32</span></span>
<span id="cb36-53">        d2 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.decode2(d3, e2)  <span class="co" style="color: #5E5E5E;"># 128,64,64</span></span>
<span id="cb36-54">        d1 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.decode1(d2, e1)  <span class="co" style="color: #5E5E5E;"># 64,128,128</span></span>
<span id="cb36-55">        d0 <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.decode0(d1)  <span class="co" style="color: #5E5E5E;"># 64,256,256</span></span>
<span id="cb36-56"></span>
<span id="cb36-57">        out <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.conv_last(d0)  <span class="co" style="color: #5E5E5E;"># 1,256,256</span></span>
<span id="cb36-58">        <span class="co" style="color: #5E5E5E;">#out = F.relu(out)</span></span>
<span id="cb36-59"></span>
<span id="cb36-60">        out <span class="op" style="color: #5E5E5E;">=</span> inp<span class="op" style="color: #5E5E5E;">*</span>out</span>
<span id="cb36-61">        out <span class="op" style="color: #5E5E5E;">=</span> out.permute(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb36-62"></span>
<span id="cb36-63">        <span class="cf" style="color: #003B4F;">return</span> out</span></code></pre></div>
</div>
<p>实际上,直接abs再log1p其实并没有那么合理</p>
<p>理论上来讲,需要把负数和正数分开</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">m <span class="op" style="color: #5E5E5E;">=</span> Unet()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.8/site-packages/torchvision-0.14.0a0+bd70a78-py3.8-linux-x86_64.egg/torchvision/models/_utils.py:135: UserWarning: Using 'weights' as positional parameter(s) is deprecated since 0.13 and will be removed in 0.15. Please use keyword parameter(s) instead.
  warnings.warn(
/opt/conda/lib/python3.8/site-packages/torchvision-0.14.0a0+bd70a78-py3.8-linux-x86_64.egg/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)</code></pre>
</div>
</div>
</section>
<section id="训练-1" class="level3">
<h3 class="anchored" data-anchor-id="训练-1">训练</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">dls <span class="op" style="color: #5E5E5E;">=</span> dl.dataloaders(<span class="dv" style="color: #AD0000;">128</span>,bs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls,</span>
<span id="cb40-2">               m,</span>
<span id="cb40-3">               loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">m <span class="op" style="color: #5E5E5E;">=</span> learn.model</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">learn.lr_find()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<pre><code>SuggestedLRs(valley=6.30957365501672e-05)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_01_06_unet噪音去除/23_01_06_unet噪音去除_files/figure-html/cell-36-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">10</span>,lr_max<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1e-4</span>,wd<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>463752384.000000</td>
      <td>390580512.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>1</td>
      <td>513132544.000000</td>
      <td>886195328.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>2</td>
      <td>528690720.000000</td>
      <td>1785890048.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>3</td>
      <td>597021952.000000</td>
      <td>470242112.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>4</td>
      <td>541548928.000000</td>
      <td>366129024.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>5</td>
      <td>509931136.000000</td>
      <td>412959200.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>6</td>
      <td>471381600.000000</td>
      <td>377111712.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>7</td>
      <td>442928384.000000</td>
      <td>398048704.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>8</td>
      <td>415480256.000000</td>
      <td>361367008.000000</td>
      <td>00:08</td>
    </tr>
    <tr>
      <td>9</td>
      <td>394238304.000000</td>
      <td>384502208.000000</td>
      <td>00:08</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>可以使用</p>
</section>
</section>
<section id="查看结果" class="level2">
<h2 class="anchored" data-anchor-id="查看结果">查看结果</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;">def</span> getvidds(num, dls<span class="op" style="color: #5E5E5E;">=</span>dls):</span>
<span id="cb45-2">    ds <span class="op" style="color: #5E5E5E;">=</span> dls.valid_ds[num]</span>
<span id="cb45-3">    inp <span class="op" style="color: #5E5E5E;">=</span> torch.istft(ds[<span class="dv" style="color: #AD0000;">0</span>], <span class="dv" style="color: #AD0000;">511</span>).cpu().numpy()</span>
<span id="cb45-4">    targ <span class="op" style="color: #5E5E5E;">=</span> torch.istft(ds[<span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">511</span>).cpu().numpy()</span>
<span id="cb45-5">    see <span class="op" style="color: #5E5E5E;">=</span> m(torch.unsqueeze(ds[<span class="dv" style="color: #AD0000;">0</span>],<span class="dv" style="color: #AD0000;">0</span>).cuda()).cpu().detach()</span>
<span id="cb45-6">    pred <span class="op" style="color: #5E5E5E;">=</span> torch.istft(see, <span class="dv" style="color: #AD0000;">511</span>).reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).numpy()</span>
<span id="cb45-7">    <span class="cf" style="color: #003B4F;">return</span> inp, targ, pred,see</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">inp,targ,pred,see <span class="op" style="color: #5E5E5E;">=</span> getvidds(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">see.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([1, 256, 1344, 2])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">ax1 <span class="op" style="color: #5E5E5E;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;">221</span>)</span>
<span id="cb49-2">ax2 <span class="op" style="color: #5E5E5E;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;">222</span>)</span>
<span id="cb49-3">ax3 <span class="op" style="color: #5E5E5E;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;">223</span>)</span>
<span id="cb49-4">ax4 <span class="op" style="color: #5E5E5E;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;">224</span>)</span>
<span id="cb49-5">ax1.plot(inp)</span>
<span id="cb49-6">ax2.plot(targ)</span>
<span id="cb49-7">ax3.plot(pred)</span>
<span id="cb49-8">ax4.imshow(np.log1p(see[<span class="dv" style="color: #AD0000;">0</span>,:,:,<span class="dv" style="color: #AD0000;">0</span>].<span class="bu" style="color: null;">abs</span>()))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;matplotlib.image.AxesImage&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/23_01_06_unet噪音去除/23_01_06_unet噪音去除_files/figure-html/cell-41-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>听听看</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">playarr(inp)</span></code></pre></div>
<div class="cell-output cell-output-display">

                    <audio controls="">
                        <source src="data:audio/mpeg;base64," type="audio/mpeg">
                        Your browser does not support the audio element.
                    </audio>
                  
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">playarr(targ)</span></code></pre></div>
<div class="cell-output cell-output-display">

                    <audio controls="">
                        <source src="data:audio/mpeg;base64," type="audio/mpeg">
                        Your browser does not support the audio element.
                    </audio>
                  
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">playarr(pred)</span></code></pre></div>
<div class="cell-output cell-output-display">

                    <audio controls="">
                        <source src="data:audio/mpeg;base64," type="audio/mpeg">
                        Your browser does not support the audio element.
                    </audio>
                  
</div>
</div>
<p>效果…还可以吧</p>
<section id="保存" class="level3">
<h3 class="anchored" data-anchor-id="保存">保存</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">learn.save(<span class="st" style="color: #20794D;">'unet_voice'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Path('models/unet_voice.pth')</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">learn.load(<span class="st" style="color: #20794D;">'unet_voice'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;fastai.learner.Learner&gt;</code></pre>
</div>
</div>


</section>
</section>
</section>

 ]]></description>
  <guid>https://doucx.github.io/blog/blog/posts/23_01_06_unet噪音去除/01_06_unet噪音去除.html</guid>
  <pubDate>Fri, 06 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>torch.nn</title>
  <dc:creator>Doucx</dc:creator>
  <link>https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/12_23_torch.nn.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> kaggle</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> zipfile</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> fastkaggle <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> fastcore <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> fastbook <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> fastcore.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> fastbook</span>
<span id="cb1-8">fastbook.setup_book()</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> torch.autograd <span class="im" style="color: #00769E;">import</span> Variable</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> autograd</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">import</span> torch.nn <span class="im" style="color: #00769E;">as</span> nn</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">from</span> torchvision <span class="im" style="color: #00769E;">import</span> transforms</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">#hide</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">!</span>nbdev_</span></code></pre></div>
</div>
<section id="torch.nn-note" class="level1">
<h1>torch.nn note</h1>
</section>
<section id="containers容器" class="level1">
<h1>Containers（容器）：</h1>
<section id="nn.module" class="level2">
<h2 class="anchored" data-anchor-id="nn.module">nn.Module</h2>
<p>一个基本的卷积网络，包含初始化和forward</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> Model(nn.Module):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-3">        <span class="bu" style="color: null;">super</span>(Model, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb3-4">        <span class="va" style="color: #111111;">self</span>.conv1 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">5</span>)  <span class="co" style="color: #5E5E5E;"># submodule: Conv2d</span></span>
<span id="cb3-5">        <span class="va" style="color: #111111;">self</span>.conv2 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb3-8">        x <span class="op" style="color: #5E5E5E;">=</span> F.relu(<span class="va" style="color: #111111;">self</span>.conv1(x))</span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;">return</span> F.relu(<span class="va" style="color: #111111;">self</span>.conv2(x))</span></code></pre></div>
</div>
<p>可见，其中包含： - <code>__init__</code> 模型初始化方法 - <code>super(Model, self).__init__()</code> 初始化上一层 - <code>forward</code> 前向传播</p>
</section>
<section id="add_modulename-module" class="level2">
<h2 class="anchored" data-anchor-id="add_modulename-module">add_module(name, module)</h2>
<p>将一个 <code>child module</code> 添加到当前 <code>modle</code>。<br>
被添加的<code>module</code>可以通过 <code>name</code>属性来获取。 例：</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">class</span> Model(nn.Module):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-3">        <span class="bu" style="color: null;">super</span>(Model, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb4-4">        <span class="va" style="color: #111111;">self</span>.add_module(<span class="st" style="color: #20794D;">"conv"</span>, nn.Conv2d(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb4-5"></span>
<span id="cb4-6">        <span class="co" style="color: #5E5E5E;"># self.conv = nn.Conv2d(10, 20, 4) 和上面这个增加module的方式等价</span></span>
<span id="cb4-7">model <span class="op" style="color: #5E5E5E;">=</span> Model()</span>
<span id="cb4-8"><span class="bu" style="color: null;">print</span>(model.conv)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Conv2d(10, 20, kernel_size=(4, 4), stride=(1, 1))</code></pre>
</div>
</div>
</section>
<section id="children" class="level2">
<h2 class="anchored" data-anchor-id="children">children()</h2>
<p>返回模型子模块的迭代器</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">model <span class="op" style="color: #5E5E5E;">=</span> resnet18()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;">for</span> sub_module <span class="kw" style="color: #003B4F;">in</span> model.children():</span>
<span id="cb7-3">    i <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-4">    <span class="bu" style="color: null;">print</span>(sub_module)</span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">4</span>:</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
ReLU(inplace=True)
MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)</code></pre>
</div>
</div>
</section>
<section id="cpudevice_idnone" class="level2">
<h2 class="anchored" data-anchor-id="cpudevice_idnone">cpu(device_id=None)</h2>
<p>将所有的模型参数(parameters)和buffers复制到CPU</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model <span class="op" style="color: #5E5E5E;">=</span> model.cpu()</span></code></pre></div>
</div>
</section>
<section id="cudadevice_idnone" class="level2">
<h2 class="anchored" data-anchor-id="cudadevice_idnone">cuda(device_id=None)</h2>
<p>将所有的模型参数(parameters)和buffers赋值GPU</p>
<p>参数说明:</p>
<p>device_id (int, optional) – 如果指定的话，所有的模型参数都会复制到指定的设备上。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">model <span class="op" style="color: #5E5E5E;">=</span> model.cuda()</span></code></pre></div>
</div>
</section>
<section id="double" class="level2">
<h2 class="anchored" data-anchor-id="double">double()</h2>
<p>将parameters和buffers的数据类型转换成double。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">model <span class="op" style="color: #5E5E5E;">=</span> model.double()</span></code></pre></div>
</div>
</section>
<section id="eval" class="level2">
<h2 class="anchored" data-anchor-id="eval">eval()</h2>
<p>将模型设置成evaluation模式</p>
<p>仅仅当模型中有Dropout和BatchNorm是才会有影响。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">model <span class="op" style="color: #5E5E5E;">=</span> model.<span class="bu" style="color: null;">eval</span>()</span></code></pre></div>
</div>
<p>若是在模型的非训练阶段（如 evaluation 阶段）未使用 model.eval() 将 model 设置成评估模式，有可能会造成同一样本的多次推断结果不一致的情况</p>
</section>
<section id="float" class="level2">
<h2 class="anchored" data-anchor-id="float">float()</h2>
<p>将parameters和buffers的数据类型转换成float。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">model <span class="op" style="color: #5E5E5E;">=</span> model.<span class="bu" style="color: null;">float</span>()</span></code></pre></div>
</div>
</section>
<section id="forward-input" class="level2">
<h2 class="anchored" data-anchor-id="forward-input">forward(* input)</h2>
<p>定义了每次执行的 计算步骤。 在所有的子类中都需要重写这个函数。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">class</span> Model(nn.Module):</span>
<span id="cb14-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb14-3">        <span class="bu" style="color: null;">super</span>(Model, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb14-4">        <span class="va" style="color: #111111;">self</span>.conv1 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">5</span>)  <span class="co" style="color: #5E5E5E;"># submodule: Conv2d</span></span>
<span id="cb14-5">        <span class="va" style="color: #111111;">self</span>.conv2 <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-8">        x <span class="op" style="color: #5E5E5E;">=</span> F.relu(<span class="va" style="color: #111111;">self</span>.conv1(x))</span>
<span id="cb14-9">        <span class="cf" style="color: #003B4F;">return</span> F.relu(<span class="va" style="color: #111111;">self</span>.conv2(x))</span></code></pre></div>
</div>
<p>就是这个forward</p>
</section>
<section id="half" class="level2">
<h2 class="anchored" data-anchor-id="half">half()</h2>
<p>将parameters和buffers的数据类型转换成half。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">model <span class="op" style="color: #5E5E5E;">=</span> model.half()</span></code></pre></div>
</div>
</section>
<section id="load_state_dictstate_dict" class="level2">
<h2 class="anchored" data-anchor-id="load_state_dictstate_dict">load_state_dict(state_dict)</h2>
<p>将state_dict中的parameters和buffers复制到此module和它的后代中。state_dict中的key<strong>必须</strong>和 model.state_dict()返回的key一致。 NOTE：用来加载模型参数。</p>
<p>参数说明:</p>
<p>state_dict (dict) – 保存parameters和persistent buffers的字典。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">model <span class="op" style="color: #5E5E5E;">=</span> resnet18()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">model.load_state_dict(resnet18().state_dict())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;All keys matched successfully&gt;</code></pre>
</div>
</div>
</section>
<section id="modules" class="level2">
<h2 class="anchored" data-anchor-id="modules">modules()</h2>
<p>返回一个包含 当前模型 所有模块的迭代器。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">class</span> Model(nn.Module):</span>
<span id="cb19-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb19-3">        <span class="bu" style="color: null;">super</span>(Model, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb19-4">        <span class="va" style="color: #111111;">self</span>.add_module(<span class="st" style="color: #20794D;">"conv"</span>, nn.Conv2d(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb19-5">        <span class="va" style="color: #111111;">self</span>.add_module(<span class="st" style="color: #20794D;">"conv1"</span>, nn.Conv2d(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb19-6"></span>
<span id="cb19-7"></span>
<span id="cb19-8">model <span class="op" style="color: #5E5E5E;">=</span> Model()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;">for</span> module <span class="kw" style="color: #003B4F;">in</span> model.modules():</span>
<span id="cb20-2">    <span class="bu" style="color: null;">print</span>(module)</span>
<span id="cb20-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'-------------CUTTHERE---------------'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model(
  (conv): Conv2d(10, 20, kernel_size=(4, 4), stride=(1, 1))
  (conv1): Conv2d(20, 10, kernel_size=(4, 4), stride=(1, 1))
)
-------------CUTTHERE---------------
Conv2d(10, 20, kernel_size=(4, 4), stride=(1, 1))
-------------CUTTHERE---------------
Conv2d(20, 10, kernel_size=(4, 4), stride=(1, 1))
-------------CUTTHERE---------------</code></pre>
</div>
</div>
<p>可以看见，它输出了所有的模块</p>
<p>重复的模块只被返回一次(children()也是)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;">class</span> Model(nn.Module):</span>
<span id="cb22-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb22-3">        <span class="bu" style="color: null;">super</span>(Model, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb22-4">        submodule <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb22-5">        <span class="va" style="color: #111111;">self</span>.add_module(<span class="st" style="color: #20794D;">'conv1'</span>, submodule)</span>
<span id="cb22-6">        <span class="va" style="color: #111111;">self</span>.add_module(<span class="st" style="color: #20794D;">'cv2'</span>, submodule)</span>
<span id="cb22-7">        <span class="va" style="color: #111111;">self</span>.add_module(<span class="st" style="color: #20794D;">'cv20'</span>, submodule)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">model <span class="op" style="color: #5E5E5E;">=</span> Model()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="cf" style="color: #003B4F;">for</span> module <span class="kw" style="color: #003B4F;">in</span> model.modules():</span>
<span id="cb24-2">    <span class="bu" style="color: null;">print</span>(module)</span>
<span id="cb24-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'-------------CUTTHERE---------------'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model(
  (conv1): Conv2d(10, 20, kernel_size=(4, 4), stride=(1, 1))
  (cv2): Conv2d(10, 20, kernel_size=(4, 4), stride=(1, 1))
  (cv20): Conv2d(10, 20, kernel_size=(4, 4), stride=(1, 1))
)
-------------CUTTHERE---------------
Conv2d(10, 20, kernel_size=(4, 4), stride=(1, 1))
-------------CUTTHERE---------------</code></pre>
</div>
</div>
</section>
<section id="named_children" class="level2">
<h2 class="anchored" data-anchor-id="named_children">named_children()</h2>
<p>返回 包含 模型当前子模块 的迭代器，yield 模块名字和模块本身。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="cf" style="color: #003B4F;">for</span> name, module <span class="kw" style="color: #003B4F;">in</span> model.named_children():</span>
<span id="cb26-2">    <span class="co" style="color: #5E5E5E;"># if name in ['conv4', 'conv5']:</span></span>
<span id="cb26-3">    <span class="bu" style="color: null;">print</span>(name, module)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>conv1 Conv2d(10, 20, kernel_size=(4, 4), stride=(1, 1))</code></pre>
</div>
</div>
</section>
<section id="parametersmemonone" class="level2">
<h2 class="anchored" data-anchor-id="parametersmemonone">parameters(memo=None)</h2>
<p>返回一个 包含模型所有参数 的迭代器。</p>
<p>一般用来当作<code>optimizer</code>的参数。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">model <span class="op" style="color: #5E5E5E;">=</span> Model()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> model.parameters():</span>
<span id="cb29-2">    <span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">type</span>(i.data), i.size())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'torch.Tensor'&gt; torch.Size([20, 10, 4, 4])
&lt;class 'torch.Tensor'&gt; torch.Size([20])</code></pre>
</div>
</div>
</section>
<section id="state_dictdestinationnone-prefixsource" class="level2">
<h2 class="anchored" data-anchor-id="state_dictdestinationnone-prefixsource">state_dict(destination=None, prefix=’’)[source]</h2>
<p>返回一个字典，保存着module的所有状态（state）。</p>
<p>parameters和persistent buffers都会包含在字典中，字典的key就是parameter和buffer的 names。</p>
<p>例子：</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;">class</span> Model(nn.Module):</span>
<span id="cb31-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb31-3">        <span class="bu" style="color: null;">super</span>(Model, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb31-4">        <span class="va" style="color: #111111;">self</span>.conv2 <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb31-5">        <span class="va" style="color: #111111;">self</span>.vari <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.rand([<span class="dv" style="color: #AD0000;">1</span>]))</span>
<span id="cb31-6">        <span class="va" style="color: #111111;">self</span>.par <span class="op" style="color: #5E5E5E;">=</span> nn.Parameter(torch.rand([<span class="dv" style="color: #AD0000;">1</span>]))</span>
<span id="cb31-7">        <span class="va" style="color: #111111;">self</span>.register_buffer(<span class="st" style="color: #20794D;">"buffer"</span>, torch.randn([<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>]))</span>
<span id="cb31-8"></span>
<span id="cb31-9">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb31-10">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.conv2(x)</span>
<span id="cb31-11">        <span class="cf" style="color: #003B4F;">return</span> x</span>
<span id="cb31-12"></span>
<span id="cb31-13"></span>
<span id="cb31-14">model <span class="op" style="color: #5E5E5E;">=</span> Model()</span>
<span id="cb31-15"><span class="bu" style="color: null;">print</span>(model.state_dict())  <span class="co" style="color: #5E5E5E;"># .keys())</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>OrderedDict([('par', tensor([0.4542])), ('buffer', tensor([[ 2.1136,  0.1283,  0.4152],
        [ 1.4492, -0.8829,  0.0859]])), ('conv2.weight', tensor([[-0.0936],
        [ 0.7408]])), ('conv2.bias', tensor([-0.8880, -0.3095]))])</code></pre>
</div>
</div>
<p>NOTE：<code>.keys()</code>:显示<code>OrderedDict</code>的key</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="bu" style="color: null;">print</span>(model.state_dict().keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>odict_keys(['par', 'buffer', 'conv2.weight', 'conv2.bias'])</code></pre>
</div>
</div>
</section>
<section id="trainmodetrue" class="level2">
<h2 class="anchored" data-anchor-id="trainmodetrue">train(mode=True)</h2>
<p>将module设置为 training mode。</p>
<p>仅仅当模型中有Dropout和BatchNorm是才会有影响。</p>
</section>
<section id="zero_grad" class="level2">
<h2 class="anchored" data-anchor-id="zero_grad">zero_grad()</h2>
<p>将module中的所有模型参数的梯度设置为0.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">model.zero_grad()</span></code></pre></div>
</div>
</section>
<section id="class-torch.nn.sequential-args" class="level2">
<h2 class="anchored" data-anchor-id="class-torch.nn.sequential-args">class torch.nn.Sequential(* args)</h2>
<p>一个时序容器。<code>Modules</code> 会以他们传入的顺序被添加到容器中。当然，也可以传入一个<code>OrderedDict</code>。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">model <span class="op" style="color: #5E5E5E;">=</span> nn.Sequential(</span>
<span id="cb36-2">    nn.Conv2d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb36-3">    nn.ReLU(),</span>
<span id="cb36-4">    nn.Conv2d(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb36-5">    nn.ReLU()</span>
<span id="cb36-6">)</span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;"># Example of using Sequential with OrderedDict</span></span>
<span id="cb36-8">model <span class="op" style="color: #5E5E5E;">=</span> nn.Sequential(OrderedDict([</span>
<span id="cb36-9">    (<span class="st" style="color: #20794D;">'conv1'</span>, nn.Conv2d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">5</span>)),</span>
<span id="cb36-10">    (<span class="st" style="color: #20794D;">'relu1'</span>, nn.ReLU()),</span>
<span id="cb36-11">    (<span class="st" style="color: #20794D;">'conv2'</span>, nn.Conv2d(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">5</span>)),</span>
<span id="cb36-12">    (<span class="st" style="color: #20794D;">'relu2'</span>, nn.ReLU())</span>
<span id="cb36-13">]))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">model</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Sequential(
  (conv1): Conv2d(1, 20, kernel_size=(5, 5), stride=(1, 1))
  (relu1): ReLU()
  (conv2): Conv2d(20, 64, kernel_size=(5, 5), stride=(1, 1))
  (relu2): ReLU()
)</code></pre>
</div>
</div>
</section>
<section id="class-torch.nn.modulelistmodulesnone" class="level2">
<h2 class="anchored" data-anchor-id="class-torch.nn.modulelistmodulesnone">class torch.nn.ModuleList(modules=None)</h2>
<p>将<code>submodules</code>保存在一个<code>list</code>中。</p>
<p><code>ModuleList</code>可以像一般的Python <code>list</code>一样被索引。而且<code>ModuleList</code>中包含的<code>modules</code>已经被正确的注册，对所有的<code>module method</code>可见。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="kw" style="color: #003B4F;">class</span> MyModule(nn.Module):</span>
<span id="cb39-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb39-3">        <span class="bu" style="color: null;">super</span>(MyModule, <span class="va" style="color: #111111;">self</span>).<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb39-4">        <span class="va" style="color: #111111;">self</span>.linears <span class="op" style="color: #5E5E5E;">=</span> nn.ModuleList([nn.Linear(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>) <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>)])</span>
<span id="cb39-5"></span>
<span id="cb39-6">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb39-7">        <span class="co" style="color: #5E5E5E;"># ModuleList can act as an iterable, or be indexed         using ints</span></span>
<span id="cb39-8">        <span class="cf" style="color: #003B4F;">for</span> i, l <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(<span class="va" style="color: #111111;">self</span>.linears):</span>
<span id="cb39-9">            x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.linears[i <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">2</span>](x) <span class="op" style="color: #5E5E5E;">+</span> l(x)</span>
<span id="cb39-10">        <span class="cf" style="color: #003B4F;">return</span> x</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">model <span class="op" style="color: #5E5E5E;">=</span> MyModule()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="cf" style="color: #003B4F;">for</span> module <span class="kw" style="color: #003B4F;">in</span> model.modules():</span>
<span id="cb41-2">    <span class="bu" style="color: null;">print</span>(module)</span>
<span id="cb41-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'-------------CUTTHERE---------------'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MyModule(
  (linears): ModuleList(
    (0): Linear(in_features=10, out_features=10, bias=True)
    (1): Linear(in_features=10, out_features=10, bias=True)
    (2): Linear(in_features=10, out_features=10, bias=True)
    (3): Linear(in_features=10, out_features=10, bias=True)
    (4): Linear(in_features=10, out_features=10, bias=True)
    (5): Linear(in_features=10, out_features=10, bias=True)
    (6): Linear(in_features=10, out_features=10, bias=True)
    (7): Linear(in_features=10, out_features=10, bias=True)
    (8): Linear(in_features=10, out_features=10, bias=True)
    (9): Linear(in_features=10, out_features=10, bias=True)
  )
)
-------------CUTTHERE---------------
ModuleList(
  (0): Linear(in_features=10, out_features=10, bias=True)
  (1): Linear(in_features=10, out_features=10, bias=True)
  (2): Linear(in_features=10, out_features=10, bias=True)
  (3): Linear(in_features=10, out_features=10, bias=True)
  (4): Linear(in_features=10, out_features=10, bias=True)
  (5): Linear(in_features=10, out_features=10, bias=True)
  (6): Linear(in_features=10, out_features=10, bias=True)
  (7): Linear(in_features=10, out_features=10, bias=True)
  (8): Linear(in_features=10, out_features=10, bias=True)
  (9): Linear(in_features=10, out_features=10, bias=True)
)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------
Linear(in_features=10, out_features=10, bias=True)
-------------CUTTHERE---------------</code></pre>
</div>
</div>
</section>
<section id="appendmodule" class="level2">
<h2 class="anchored" data-anchor-id="appendmodule">append(module)</h2>
<p>等价于 <code>list</code> 的 <code>append()</code></p>
<p>参数说明:</p>
<p>module (nn.Module) – 要 append 的module</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">list0.append(nn.Linear(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>ModuleList(
  (0): Linear(in_features=1, out_features=10, bias=True)
  (1): Linear(in_features=1, out_features=10, bias=True)
  (2): Linear(in_features=1, out_features=10, bias=True)
  (3): Linear(in_features=1, out_features=10, bias=True)
  (4): Linear(in_features=1, out_features=10, bias=True)
  (5): Linear(in_features=1, out_features=10, bias=True)
  (6): Linear(in_features=1, out_features=10, bias=True)
  (7): Linear(in_features=1, out_features=10, bias=True)
  (8): Linear(in_features=1, out_features=10, bias=True)
)</code></pre>
</div>
</div>
</section>
<section id="extendmodules" class="level2">
<h2 class="anchored" data-anchor-id="extendmodules">extend(modules)</h2>
<p>等价于 <code>list</code> 的 <code>extend()</code> 方法</p>
<p>参数说明:</p>
<p>modules (list) – list of modules to append</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">list0 <span class="op" style="color: #5E5E5E;">=</span> nn.ModuleList([nn.Linear(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>)])</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">list0</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>ModuleList(
  (0): Linear(in_features=1, out_features=10, bias=True)
)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">list0.extend([nn.Linear(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>), nn.Linear(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>)])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>ModuleList(
  (0): Linear(in_features=1, out_features=10, bias=True)
  (1): Linear(in_features=1, out_features=10, bias=True)
  (2): Linear(in_features=1, out_features=10, bias=True)
)</code></pre>
</div>
</div>
<p>extend输入迭代器/列表等，append输入一个数据</p>
</section>
</section>
<section id="卷积层" class="level1">
<h1>卷积层</h1>
<section id="class-torch.nn.conv1d" class="level2">
<h2 class="anchored" data-anchor-id="class-torch.nn.conv1d">class torch.nn.Conv1d</h2>
<ul>
<li>in_channels(int)
<ul>
<li>输入信号的通道(比如RGB)</li>
</ul></li>
<li>out_channels(int)
<ul>
<li>卷积产生的通道（比如六个通道）</li>
</ul></li>
<li>kerner_size(int or tuple)
<ul>
<li>卷积核的尺寸</li>
</ul></li>
<li>stride(int or tuple, optional)
<ul>
<li>卷积步长（用来节省计算量）</li>
</ul></li>
<li>padding (int or tuple, optional)
<ul>
<li>输入的每一条边补充0的层数（补充边缘）</li>
</ul></li>
<li>dilation(int or tuple, `optional``)
<ul>
<li>卷积核元素之间的间距（空洞卷积）</li>
</ul></li>
<li>groups(int, optional)
<ul>
<li>从输入通道到输出通道的阻塞连接数（控制输入和输出之间的连接， group=1，输出是所有的输入的卷积；group=2，此时相当于有并排的两个卷积层，每个卷积层计算输入通道的一半，并且产生的输出是输出通道的一半，随后将这两个输出连接起来。）</li>
</ul></li>
<li>bias(bool, optional) - 如果bias=True，添加偏置</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">m <span class="op" style="color: #5E5E5E;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">3</span>, stride<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb50-2">input0 <span class="op" style="color: #5E5E5E;">=</span> torch.autograd.Variable(torch.randn(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb50-3">output <span class="op" style="color: #5E5E5E;">=</span> m(input0)</span></code></pre></div>
</div>
<p>注意：对于一组图片，会产生一组输出</p>
<p>图片叠加在第一维度</p>
<p>比如<code>torch.randn(10, 16, 3)</code>在这里相当于十张大小为长3通道16的图片</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">output.size()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([1, 33, 1])</code></pre>
</div>
</div>
<p><code>nn.Conv2d,3d</code>同理，只有卷积核尺寸不同</p>
</section>
<section id="class-torch.nn.convtranspose1d" class="level2">
<h2 class="anchored" data-anchor-id="class-torch.nn.convtranspose1d">class torch.nn.ConvTranspose1d</h2>
<p>1维的解卷积（转置卷积）操作（transposed convolution operator，注意改视作操作可视作解卷积操作，但并不是真正的解卷积操作） 该模块可以看作是Conv1d相对于其输入的梯度，有时（但不正确地）被称为解卷积操作。</p>
<p>很显然，它会丢失信息，并且会产生棋盘格伪影</p>
<p>输入：<br>
class torch.nn.ConvTranspose2d(in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True)</p>
<ul>
<li>in_channels(int) – 输入信号的通道数</li>
<li>out_channels(int) – 卷积产生的通道</li>
<li>kernel_size(int or tuple) - 卷积核的大小</li>
<li>stride(int or tuple, optional) - 卷积步长</li>
<li>padding(int or tuple, optional) - 输入的每一条边补充0的层数</li>
<li>output_padding(int or tuple, optional) - 输出的每一条边补充0的层数</li>
<li>dilation(int or tuple, optional) – 卷积核元素之间的间距</li>
<li>groups(int, optional) – 从输入通道到输出通道的阻塞连接数</li>
<li>bias(bool, optional) - 如果bias=True，添加偏置</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">im <span class="op" style="color: #5E5E5E;">=</span> PILImage.create(imgpath[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">data <span class="op" style="color: #5E5E5E;">=</span> untar_data(URLs.PETS)</span>
<span id="cb54-2"></span>
<span id="cb54-3">imgpath <span class="op" style="color: #5E5E5E;">=</span> get_image_files(data<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'images'</span>)</span>
<span id="cb54-4"></span>
<span id="cb54-5">img <span class="op" style="color: #5E5E5E;">=</span> ToTensor()(PILImage.create(imgpath[<span class="dv" style="color: #AD0000;">0</span>]))</span>
<span id="cb54-6"></span>
<span id="cb54-7">img <span class="op" style="color: #5E5E5E;">=</span> img.<span class="bu" style="color: null;">float</span>()</span>
<span id="cb54-8"></span>
<span id="cb54-9">img <span class="op" style="color: #5E5E5E;">=</span> img.unsqueeze(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<p>创建一个卷积核</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">conv <span class="op" style="color: #5E5E5E;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb55-2"></span>
<span id="cb55-3">imgc <span class="op" style="color: #5E5E5E;">=</span> conv(img)</span>
<span id="cb55-4"></span>
<span id="cb55-5">imga <span class="op" style="color: #5E5E5E;">=</span> array(imgc.detach())</span>
<span id="cb55-6"></span>
<span id="cb55-7">plt.imshow(imga[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;matplotlib.image.AxesImage&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-42-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>转置卷积</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">convt <span class="op" style="color: #5E5E5E;">=</span> nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">imgc.size()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([1, 1, 187, 249])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">imgc[<span class="dv" style="color: #AD0000;">0</span>].size()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([1, 187, 249])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">imgt <span class="op" style="color: #5E5E5E;">=</span> convt(imgc[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">imgt <span class="op" style="color: #5E5E5E;">=</span> imgt<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">255</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">imgt <span class="op" style="color: #5E5E5E;">=</span> imgt.<span class="bu" style="color: null;">int</span>()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">imgt <span class="op" style="color: #5E5E5E;">=</span> array(imgt.detach())</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">tim <span class="op" style="color: #5E5E5E;">=</span> transforms.ToPILImage()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">tim(imgc[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-51-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>正常来说用不到这个）</p>
</section>
</section>
<section id="池化层" class="level1">
<h1>池化层</h1>
<section id="nn.maxpool1d" class="level2">
<h2 class="anchored" data-anchor-id="nn.maxpool1d">nn.MaxPool1d</h2>
<p>最大池化</p>
<ul>
<li>kernel_size(int or tuple) - max pooling的窗口大小</li>
<li>stride(int or tuple, optional) - max pooling的窗口移动的步长。默认值是kernel_size</li>
<li>padding(int or tuple, optional) - 输入的每一条边补充0的层数</li>
<li>dilation(int or tuple, optional) – 一个控制窗口中元素步幅的参数</li>
<li>return_indices - 如果等于True，会返回输出最大值的序号，对于上采样操作会有帮助</li>
<li>ceil_mode - 如果等于True，计算输出信号大小的时候，会使用向上取整，代替默认的向下取整的操作</li>
</ul>
</section>
<section id="nn.avgpool1d" class="level2">
<h2 class="anchored" data-anchor-id="nn.avgpool1d">nn.AvgPool1d</h2>
<p>平均池化</p>
</section>
<section id="nn.fractionalmaxpool2d" class="level2">
<h2 class="anchored" data-anchor-id="nn.fractionalmaxpool2d">nn.FractionalMaxPool2d</h2>
<p>分数最大化池化</p>
<ul>
<li>kernel_size(int or tuple) - 最大池化操作时的窗口大小。可以是一个数字（表示K<em>K的窗口），也可以是一个元组（kh</em>kw）</li>
<li>output_size - 输出图像的尺寸。可以使用一个tuple指定(oH,oW)，也可以使用一个数字oH指定一个oH*oH的输出。</li>
<li>output_ratio – 将输入图像的大小的百分比指定为输出图片的大小，使用一个范围在(0,1)之间的数字指定</li>
<li>return_indices - 默认值False，如果设置为True，会返回输出的索引，索引对 nn.MaxUnpool2d有用。</li>
</ul>
<p>也就是说，它可以对任意大小的东西进行最大池化，并输出相同/相同比例大小的图片</p>
<p>有点像最近邻采样</p>
</section>
<section id="nn.lppool2d" class="level2">
<h2 class="anchored" data-anchor-id="nn.lppool2d">nn.LPPool2d</h2>
<p>二维幂平均池化</p>
<p>也就是一个结合了最大池化和平均池化的方法</p>
<p><code>m = nn.LPPool2d(p, (3, 2), stride=(2, 1))</code><br>
- 当p为无穷大的时候时，等价于最大池化操作 - 当p=1时，等价于平均池化操作</p>
</section>
<section id="nn.adaptivemaxpool2d" class="level2">
<h2 class="anchored" data-anchor-id="nn.adaptivemaxpool2d">nn.AdaptiveMaxPool2d</h2>
<p>自适应最大池化</p>
<ul>
<li>output_size: 输出信号的尺寸,可以用（H,W）表示H<em>W的输出，也可以使用数字H表示H</em>H大小的输出</li>
<li>return_indices: 如果设置为True，会返回输出的索引。对 nn.MaxUnpool2d有用，默认值是False</li>
</ul>
</section>
</section>
<section id="non-linear-activations-非线性激活函数" class="level1">
<h1>Non-Linear Activations 非线性激活函数</h1>
<p>激活函数是用来增加网络非线性的</p>
<p>常用的有<code>relu</code>,<code>sigmoid</code>,<code>softmax</code></p>
<section id="torch.nn.relu" class="level2">
<h2 class="anchored" data-anchor-id="torch.nn.relu">torch.nn.ReLU</h2>
<p>线性整流单元(也就是把小于零的变成0）<br>
<img src="https://latex.codecogs.com/png.latex?%7BReLU%7D(x)=%20max(0,%20x)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb68-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.ReLU()(x)</span>
<span id="cb68-3"></span>
<span id="cb68-4">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-52-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="nn.relu6" class="level2">
<h2 class="anchored" data-anchor-id="nn.relu6">nn.ReLU6</h2>
<p>对输入的每一个元素运用函数<br>
<img src="https://latex.codecogs.com/png.latex?%7BReLU6%7D(x)%20=%20min(max(0,x),%206)"></p>
<p>也就是把小于0的变成0,大于6的变成6</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb69-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.ReLU6()(x)</span>
<span id="cb69-3"></span>
<span id="cb69-4">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-53-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="nn.elu" class="level2">
<h2 class="anchored" data-anchor-id="nn.elu">nn.ELU</h2>
<p>对输入的每一个元素运用函数<br>
<img src="https://latex.codecogs.com/png.latex?f(x)%20=%20max(0,x)%20+%20min(0,%20alpha%20*%20(e%5Ex%20-%201))"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb70-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.ELU(<span class="dv" style="color: #AD0000;">10</span>)(x)</span>
<span id="cb70-3"></span>
<span id="cb70-4">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-54-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>也就是对于0以下的，使用e**x，对于0以上的，使用普通的ReLU</p>
</section>
<section id="nn.prelu" class="level2">
<h2 class="anchored" data-anchor-id="nn.prelu">nn.PReLU</h2>
<p>对输入的每一个元素运用函数<img src="https://latex.codecogs.com/png.latex?PReLU(x)%20=%20max(0,x)%20+%20a%20*%20min(0,x)"></p>
<p>a是一个可学习参数。当没有声明时，nn.PReLU()在所有的输入中只有一个参数a；如果是nn.PReLU(nChannels)，a将应用到每个输入。</p>
<ul>
<li>num_parameters=1 -需要学习的a的个数<br>
</li>
<li>init=0.25 -a的默认值</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb71-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.PReLU(num_parameters<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, init<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>)(x).detach().numpy()</span>
<span id="cb71-3"></span>
<span id="cb71-4"></span>
<span id="cb71-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-55-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>也就是说，这是一个在负值上进行y=ax，正值进行y=x的函数</p>
<p>不要对a使用权重衰减</p>
</section>
<section id="nn.leakyrelu" class="level2">
<h2 class="anchored" data-anchor-id="nn.leakyrelu">nn.LeakyReLU</h2>
<ul>
<li>negative_slope：控制负斜率的角度，默认等于0.01</li>
<li>inplace-选择是否进行覆盖运算</li>
</ul>
<p>对输入的每一个元素运用<img src="https://latex.codecogs.com/png.latex?f(x)%20=%20max(0,%20x)%20+%20%7Bnegative_slope%7D%20*%20min(0,%20x)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb72-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.LeakyReLU(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)(x).detach().numpy()</span>
<span id="cb72-3"></span>
<span id="cb72-4"></span>
<span id="cb72-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-56-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>与PReLU差不多，但是a固定</p>
</section>
<section id="nn.threshold" class="level2">
<h2 class="anchored" data-anchor-id="nn.threshold">nn.Threshold</h2>
<ul>
<li>threshold：阈值</li>
<li>value：输入值小于阈值则会被value代替</li>
<li>inplace：选择是否进行覆盖运算</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb73-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.Threshold(threshold<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)(x).detach().numpy()</span>
<span id="cb73-3"></span>
<span id="cb73-4"></span>
<span id="cb73-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-57-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>相当于ReLU的泛化</p>
</section>
<section id="nn.hardtanh" class="level2">
<h2 class="anchored" data-anchor-id="nn.hardtanh">nn.Hardtanh</h2>
<ul>
<li>min_val：线性区域范围最小值</li>
<li>max_val：线性区域范围最大值</li>
<li>inplace：选择是否进行覆盖运算</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb74-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.Hardtanh(min_val<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, max_val<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)(x).detach().numpy()</span>
<span id="cb74-3"></span>
<span id="cb74-4"></span>
<span id="cb74-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-58-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>虽然带有<code>tanh</code>,但和tan没什么关系。它就相当于<code>ReLU6</code>的泛化</p>
</section>
<section id="nn.sigmoid" class="level2">
<h2 class="anchored" data-anchor-id="nn.sigmoid">nn.Sigmoid</h2>
<p><img src="https://latex.codecogs.com/png.latex?f%20(%20x%20)%20=%201%20/%20(%201%20+%20e%20%E2%88%92%20x%20)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb75-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.Sigmoid()(x).detach().numpy()</span>
<span id="cb75-3"></span>
<span id="cb75-4"></span>
<span id="cb75-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-59-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="nn.tanh" class="level2">
<h2 class="anchored" data-anchor-id="nn.tanh">nn.Tanh</h2>
<p><img src="https://latex.codecogs.com/png.latex?f%20(%20x%20)%20=%20(e%5Ex%20%E2%88%92%20e%5Ex)%20/%20(e%5Ex%20+%20e%5Ex)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb76-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.Tanh()(x).detach().numpy()</span>
<span id="cb76-3"></span>
<span id="cb76-4"></span>
<span id="cb76-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-60-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>其实和sigmoid挺像的，不过更窄一点</p>
</section>
<section id="nn.logsigmoid" class="level2">
<h2 class="anchored" data-anchor-id="nn.logsigmoid">nn.LogSigmoid</h2>
<p><img src="https://latex.codecogs.com/png.latex?LogSigmoid(x)%20=%20log(%201%20/%20(%201%20+%20e%5E%7B-x%7D))"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb77-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.LogSigmoid()(x).detach().numpy()</span>
<span id="cb77-3"></span>
<span id="cb77-4"></span>
<span id="cb77-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-61-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>也就是<code>sigmoid</code>的对数</p>
</section>
<section id="nn.softplus" class="level2">
<h2 class="anchored" data-anchor-id="nn.softplus">nn.Softplus</h2>
<p><img src="https://latex.codecogs.com/png.latex?f%20(%20x%20)%20=%20%5Cfrac%7B1%7D%7Bbeta%7D%E2%88%97log(1+e(beta%E2%88%97xi))"></p>
<ul>
<li>beta：Softplus函数的beta值(默认为1)</li>
<li>threshold：阈值(i)(默认为20）</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb78-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.Softplus(beta<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, threshold<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)(x).detach().numpy()</span>
<span id="cb78-3"></span>
<span id="cb78-4"></span>
<span id="cb78-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-62-output-1.png" class="img-fluid"></p>
</div>
</div>
<p><code>Softplus</code>函数是<code>ReLU</code>函数的平滑逼近</p>
</section>
<section id="nn.softshrink" class="level2">
<h2 class="anchored" data-anchor-id="nn.softshrink">nn.Softshrink</h2>
<p><img src="https://latex.codecogs.com/png.latex?f%20(%20x%20)%20=%20x%20%E2%88%92%20lambda%20,%20if%20x%20%3E%20lambda%20f%20(%20x%20)%20=%20x%20+%20lambda%20,%20if%20x%20%3C%20%E2%88%92lambda%20f(x)=0,otherwise"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb79-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.Softshrink(lambd<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>)(x).detach().numpy()</span>
<span id="cb79-3"></span>
<span id="cb79-4"></span>
<span id="cb79-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-63-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>如你所见，中间的台阶大小是12</p>
</section>
<section id="nn.softsign" class="level2">
<h2 class="anchored" data-anchor-id="nn.softsign">nn.Softsign</h2>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x%20/%20(1%20+%20%7Cx%7C)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb80-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.Softsign()(x).detach().numpy()</span>
<span id="cb80-3"></span>
<span id="cb80-4"></span>
<span id="cb80-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-64-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="nn.tanhshrink" class="level2">
<h2 class="anchored" data-anchor-id="nn.tanhshrink">nn.Tanhshrink</h2>
<p><img src="https://latex.codecogs.com/png.latex?Tanhshrink%20(%20x%20)%20=%20x%20%E2%88%92%20Tanh%20(%20x%20)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb81-2">y <span class="op" style="color: #5E5E5E;">=</span> nn.Tanhshrink()(x).detach().numpy()</span>
<span id="cb81-3"></span>
<span id="cb81-4"></span>
<span id="cb81-5">plt.plot(x, y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/22_12_23_torch.nn_files/figure-html/cell-65-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="nn.softmin" class="level2">
<h2 class="anchored" data-anchor-id="nn.softmin">nn.Softmin</h2>
<p>它对n维输入张量运用Softmin函数，将张量的每个元素缩放到（0,1）区间且和为1。</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">m <span class="op" style="color: #5E5E5E;">=</span> nn.Softmin(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb82-2">input0 <span class="op" style="color: #5E5E5E;">=</span> torch.autograd.Variable(torch.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">20</span>).reshape(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span>).<span class="bu" style="color: null;">float</span>())</span>
<span id="cb82-3"><span class="bu" style="color: null;">print</span>(input0)</span>
<span id="cb82-4"><span class="bu" style="color: null;">print</span>(m(input0))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 0.,  1.,  2.,  3.],
        [ 4.,  5.,  6.,  7.],
        [ 8.,  9., 10., 11.],
        [12., 13., 14., 15.],
        [16., 17., 18., 19.]])
tensor([[9.8168e-01, 9.8168e-01, 9.8168e-01, 9.8168e-01],
        [1.7980e-02, 1.7980e-02, 1.7980e-02, 1.7980e-02],
        [3.2932e-04, 3.2932e-04, 3.2932e-04, 3.2932e-04],
        [6.0317e-06, 6.0317e-06, 6.0317e-06, 6.0317e-06],
        [1.1047e-07, 1.1047e-07, 1.1047e-07, 1.1047e-07]])</code></pre>
</div>
</div>
</section>
<section id="nn.softmax" class="level2">
<h2 class="anchored" data-anchor-id="nn.softmax">nn.Softmax</h2>
<p>和<code>Softmin</code>”相反“</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">m <span class="op" style="color: #5E5E5E;">=</span> nn.Softmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb84-2">input0 <span class="op" style="color: #5E5E5E;">=</span> torch.autograd.Variable(torch.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">20</span>).reshape(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span>).<span class="bu" style="color: null;">float</span>())</span>
<span id="cb84-3"><span class="bu" style="color: null;">print</span>(input0)</span>
<span id="cb84-4"><span class="bu" style="color: null;">print</span>(m(input0))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 0.,  1.,  2.,  3.],
        [ 4.,  5.,  6.,  7.],
        [ 8.,  9., 10., 11.],
        [12., 13., 14., 15.],
        [16., 17., 18., 19.]])
tensor([[1.1047e-07, 1.1047e-07, 1.1047e-07, 1.1047e-07],
        [6.0317e-06, 6.0317e-06, 6.0317e-06, 6.0317e-06],
        [3.2932e-04, 3.2932e-04, 3.2932e-04, 3.2932e-04],
        [1.7980e-02, 1.7980e-02, 1.7980e-02, 1.7980e-02],
        [9.8168e-01, 9.8168e-01, 9.8168e-01, 9.8168e-01]])</code></pre>
</div>
</div>
</section>
<section id="nn.logsoftmax" class="level2">
<h2 class="anchored" data-anchor-id="nn.logsoftmax">nn.LogSoftmax</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">m <span class="op" style="color: #5E5E5E;">=</span> nn.LogSoftmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb86-2">input0 <span class="op" style="color: #5E5E5E;">=</span> torch.autograd.Variable(torch.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">20</span>).reshape(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span>).<span class="bu" style="color: null;">float</span>())</span>
<span id="cb86-3"><span class="bu" style="color: null;">print</span>(input0)</span>
<span id="cb86-4"><span class="bu" style="color: null;">print</span>(m(input0))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 0.,  1.,  2.,  3.],
        [ 4.,  5.,  6.,  7.],
        [ 8.,  9., 10., 11.],
        [12., 13., 14., 15.],
        [16., 17., 18., 19.]])
tensor([[-16.0185, -16.0185, -16.0185, -16.0185],
        [-12.0185, -12.0185, -12.0185, -12.0185],
        [ -8.0185,  -8.0185,  -8.0185,  -8.0185],
        [ -4.0185,  -4.0185,  -4.0185,  -4.0185],
        [ -0.0185,  -0.0185,  -0.0185,  -0.0185]])</code></pre>
</div>
</div>
</section>
</section>
<section id="normalization-layers-标准化层" class="level1">
<h1>Normalization layers 标准化层</h1>
<section id="nn.batchnorm2d" class="level2">
<h2 class="anchored" data-anchor-id="nn.batchnorm2d">nn.BatchNorm2d</h2>
<p><em>num_features, eps=1e-05, momentum=0.1, affine=True</em></p>
<p>对小批量(mini-batch)3d数据组成的4d输入进行批标准化(Batch Normalization)操作</p>
<ul>
<li>num_features： 来自期望输入的特征数，该期望输入的大小为’batch_size x num_features x height x width’</li>
<li>eps： 为保证数值稳定性（分母不能趋近或取0）,给分母加上的值。默认为1e-5。</li>
<li>momentum： 动态均值和动态方差所使用的动量。默认为0.1。</li>
<li>affine： 一个布尔值，当设为true，给该层添加可学习的仿射变换参数。</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># With Learnable Parameters</span></span>
<span id="cb88-2">m <span class="op" style="color: #5E5E5E;">=</span> nn.BatchNorm2d(<span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;"># Without Learnable Parameters</span></span>
<span id="cb89-2">m <span class="op" style="color: #5E5E5E;">=</span> nn.BatchNorm2d(<span class="dv" style="color: #AD0000;">100</span>, affine<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">input0 <span class="op" style="color: #5E5E5E;">=</span> torch.autograd.Variable(torch.rand(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">35</span>, <span class="dv" style="color: #AD0000;">45</span>))</span>
<span id="cb90-2">mean <span class="op" style="color: #5E5E5E;">=</span> input0.mean()</span>
<span id="cb90-3">std <span class="op" style="color: #5E5E5E;">=</span> input0.var()</span>
<span id="cb90-4"><span class="bu" style="color: null;">print</span>(std, var)</span>
<span id="cb90-5">input0 <span class="op" style="color: #5E5E5E;">=</span> m(input0)</span>
<span id="cb90-6">mean <span class="op" style="color: #5E5E5E;">=</span> input0.mean()</span>
<span id="cb90-7">std <span class="op" style="color: #5E5E5E;">=</span> input0.var()</span>
<span id="cb90-8"><span class="bu" style="color: null;">print</span>(std, var)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(0.0833) tensor(0.9999, grad_fn=&lt;VarBackward0&gt;)
tensor(0.9999, grad_fn=&lt;VarBackward0&gt;) tensor(0.9999, grad_fn=&lt;VarBackward0&gt;)</code></pre>
</div>
</div>
<p>也就是把平均值变成1,标准差变成1</p>
</section>
</section>
<section id="recurrent-layers-循环层" class="level1">
<h1>Recurrent layers 循环层</h1>
<p>恭喜你看到了这里！这里是循环神经网络（RNN）</p>
<section id="nn.rnnargs-kwargs" class="level2">
<h2 class="anchored" data-anchor-id="nn.rnnargs-kwargs">nn.RNN(args, *kwargs)</h2>
<p><em>这只是一个几层全连接和激活函数组成的简单RNN而已……</em><br>
<em>它是层啊……那没事了</em></p>
<p>将一个多层的 <code>Elman RNN</code>，激活函数为<code>tanh</code>或者<code>ReLU</code>，用于输入序列。</p>
<p>对输入序列中每个元素，RNN每层的计算公式为 <img src="https://latex.codecogs.com/png.latex?%20h_t=tanh(w_%7Bih%7D%20x_t+b_%7Bih%7D+w_%7Bhh%7D%20h_%7Bt-1%7D+b_%7Bhh%7D)%20"> <img src="https://latex.codecogs.com/png.latex?h_t">是时刻<img src="https://latex.codecogs.com/png.latex?t">的隐状态。 <img src="https://latex.codecogs.com/png.latex?x_t">是上一层时刻<img src="https://latex.codecogs.com/png.latex?t">的隐状态，或者是第一层在时刻<img src="https://latex.codecogs.com/png.latex?t">的输入。如果nonlinearity=‘relu’,那么将使用relu代替tanh作为激活函数。</p>
<section id="参数" class="level3">
<h3 class="anchored" data-anchor-id="参数">参数</h3>
<ul>
<li><p>input_size – 输入x的特征数量。</p></li>
<li><p>hidden_size – 隐层的特征数量。</p></li>
<li><p>num_layers – RNN的层数。</p></li>
<li><p>nonlinearity – 指定非线性函数使用tanh还是relu。默认是tanh。</p></li>
<li><p>bias – 如果是False，那么RNN层就不会使用偏置权重 <img src="https://latex.codecogs.com/png.latex?b_ih">和<img src="https://latex.codecogs.com/png.latex?b_hh">,默认是True</p></li>
<li><p>batch_first – 如果True的话，那么输入Tensor的shape应该是[batch_size, time_step, feature],输出也是这样。</p></li>
<li><p>dropout – 如果值非零，那么除了最后一层外，其它层的输出都会套上一个dropout层。</p></li>
<li><p>bidirectional – 如果True，将会变成一个双向RNN，默认为False。</p></li>
</ul>
</section>
<section id="输入-input-h_0" class="level3">
<h3 class="anchored" data-anchor-id="输入-input-h_0">输入 (input, h_0)</h3>
<p>input(seq_len, batch, input_size): 保存输入序列特征的<code>tensor</code>。</p>
<p><code>input</code>可以是被填充的变长的序列。细节请看<code>torch.nn.utils.rnn.pack_padded_sequence()</code></p>
<ul>
<li>h_0(num_layers * num_directions, batch, hidden_size): 保存着初始隐状态的tensor</li>
</ul>
</section>
<section id="输出-output-h_n" class="level3">
<h3 class="anchored" data-anchor-id="输出-output-h_n">输出 (output, h_n)</h3>
<ul>
<li>output (seq_len, batch, hidden_size * num_directions): 保存着RNN最后一层的输出特征。如果输入是被填充过的序列，那么输出也是被填充的序列。</li>
<li>h_n (num_layers * num_directions, batch, hidden_size): 保存着最后一个时刻隐状态。</li>
</ul>
</section>
<section id="属性" class="level3">
<h3 class="anchored" data-anchor-id="属性">属性</h3>
<ul>
<li><p>weight_ih_l[k] – 第k层的 input-hidden 权重， 可学习，形状是(input_size x hidden_size)。</p></li>
<li><p>weight_hh_l[k] – 第k层的 hidden-hidden 权重， 可学习，形状是(hidden_size x hidden_size)</p></li>
<li><p>bias_ih_l[k] – 第k层的 input-hidden 偏置， 可学习，形状是(hidden_size)</p></li>
<li><p>bias_hh_l[k] – 第k层的 hidden-hidden 偏置， 可学习，形状是(hidden_size)</p></li>
</ul>
</section>
<section id="示例" class="level3">
<h3 class="anchored" data-anchor-id="示例">示例</h3>
<p>建立一个RNN</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="co" style="color: #5E5E5E;">#rnn = nn.RNN(10, 30, 1)</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">rnn <span class="op" style="color: #5E5E5E;">=</span> nn.RNN(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>生成假数据：</p>
<p>input0为时间序列<br>
h0为第一份输入</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">input0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>).reshape(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).<span class="bu" style="color: null;">float</span>())</span>
<span id="cb94-2"></span>
<span id="cb94-3">h0 <span class="op" style="color: #5E5E5E;">=</span> input0[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</div>
<p>网络的内容</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">rnn.zero_grad()</span>
<span id="cb95-2"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> rnn.parameters():</span>
<span id="cb95-3">    <span class="bu" style="color: null;">print</span>(i.grad)</span>
<span id="cb95-4">    <span class="co" style="color: #5E5E5E;">#i.data.add_(-1, i.grad.data)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[0.]])
tensor([[0.]])
tensor([0.])
tensor([0.])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1">output, hn <span class="op" style="color: #5E5E5E;">=</span> rnn(input0[<span class="dv" style="color: #AD0000;">1</span>], h0)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">output</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[-1.0000]], grad_fn=&lt;SqueezeBackward1&gt;)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">input0[<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[1.]])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">hn</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[-0.4810]], grad_fn=&lt;SqueezeBackward1&gt;)</code></pre>
</div>
</div>
</section>
</section>
<section id="nn.lstm" class="level2">
<h2 class="anchored" data-anchor-id="nn.lstm">nn.LSTM</h2>
<p><em>长短期记忆</em></p>
<p>将一个多层的 (LSTM) 应用到输入序列。</p>
<p>对输入序列的每个元素，LSTM的每层都会执行以下计算：</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Baligned%7D%20i_t%20&amp;=%20sigmoid(W_%7Bii%7Dx_t+b_%7Bii%7D+W_%7Bhi%7Dh_%7Bt-1%7D+b_%7Bhi%7D)%20%5C%20f_t%20&amp;=%20sigmoid(W_%7Bif%7Dx_t+b_%7Bif%7D+W_%7Bhf%7Dh_%7Bt-1%7D+b_%7Bhf%7D)%20%5C%20o_t%20&amp;=%20sigmoid(W_%7Bio%7Dx_t+b_%7Bio%7D+W_%7Bho%7Dh_%7Bt-1%7D+b_%7Bho%7D)%5C%20g_t%20&amp;=%20tanh(W_%7Big%7Dx_t+b_%7Big%7D+W_%7Bhg%7Dh_%7Bt-1%7D+b_%7Bhg%7D)%5C%20c_t%20&amp;=%20f_tc_%7Bt-1%7D+i_tg_t%5C%20h_t%20&amp;=%20o_t*tanh(c_t)%20%5Cend%7Baligned%7D%20"></p>
<p><img src="https://latex.codecogs.com/png.latex?h_t">是时刻<img src="https://latex.codecogs.com/png.latex?t">的隐状态,<img src="https://latex.codecogs.com/png.latex?c_t">是时刻<img src="https://latex.codecogs.com/png.latex?t">的细胞状态，<img src="https://latex.codecogs.com/png.latex?x_t">是上一层的在时刻<img src="https://latex.codecogs.com/png.latex?t">的隐状态或者是第一层在时刻<img src="https://latex.codecogs.com/png.latex?t">的输入。<img src="https://latex.codecogs.com/png.latex?i_t,%20f_t,%20g_t,%20o_t"> 分别代表 输入门，遗忘门，细胞和输出门。</p>
<p><em>其实这东西不看也没什么关系的</em></p>
<section id="参数-1" class="level3">
<h3 class="anchored" data-anchor-id="参数-1">参数</h3>
<ul>
<li><p>input_size – 输入的特征维度</p></li>
<li><p>hidden_size – 隐状态的特征维度</p></li>
<li><p>num_layers – 层数（和时序展开要区分开）</p></li>
<li><p>bias – 如果为False，那么LSTM将不会使用<img src="https://latex.codecogs.com/png.latex?b_%7Bih%7D,b_%7Bhh%7D">，默认为True。</p></li>
<li><p>batch_first – 如果为True，那么输入和输出Tensor的形状为(batch, seq, feature)</p></li>
<li><p>dropout – 如果非零的话，将会在RNN的输出上加个dropout，最后一层除外。</p></li>
<li><p>bidirectional – 如果为True，将会变成一个双向RNN，默认为False。</p></li>
</ul>
</section>
<section id="输入-input-h_0-c_0" class="level3">
<h3 class="anchored" data-anchor-id="输入-input-h_0-c_0">输入: input, (h_0, c_0)</h3>
<ul>
<li><p>input (seq_len, batch, input_size): 包含输入序列特征的Tensor。也可以是packed variable。</p></li>
<li><p>h_0 (num_layers * num_directions, batch, hidden_size):保存着batch中每个元素的初始化隐状态的Tensor</p></li>
<li><p>c_0 (num_layers * num_directions, batch, hidden_size): 保存着batch中每个元素的初始化细胞状态的Tensor</p></li>
</ul>
</section>
<section id="输出output-h_n-c_n" class="level3">
<h3 class="anchored" data-anchor-id="输出output-h_n-c_n">输出:output, (h_n, c_n)</h3>
<ul>
<li><p>output (seq_len, batch, hidden_size * num_directions): 保存RNN最后一层的输出的Tensor。 如果输入是torch.nn.utils.rnn.PackedSequence，那么输出也是torch.nn.utils.rnn.PackedSequence。</p></li>
<li><p>h_n (num_layers * num_directions, batch, hidden_size): Tensor，保存着RNN最后一个时间步的隐状态。</p></li>
<li><p>c_n (num_layers * num_directions, batch, hidden_size): Tensor，保存着RNN最后一个时间步的细胞状态。</p></li>
</ul>
</section>
<section id="属性-1" class="level3">
<h3 class="anchored" data-anchor-id="属性-1">属性</h3>
<ul>
<li><p>weight_ih_l[k] – 第k层可学习的input-hidden权重(<img src="https://latex.codecogs.com/png.latex?W_%7Bii%7D%7CW_%7Bif%7D%7CW_%7Big%7D%7CW_%7Bio%7D">)，形状为(input_size x 4*hidden_size)</p></li>
<li><p>weight_hh_l[k] – 第k层可学习的hidden-hidden权重(<img src="https://latex.codecogs.com/png.latex?W_%7Bhi%7D%7CW_%7Bhf%7D%7CW_%7Bhg%7D%7CW_%7Bho%7D">)，形状为(hidden_size x 4*hidden_size)。</p></li>
<li><p>bias_ih_l[k] – 第k层可学习的input-hidden偏置(<img src="https://latex.codecogs.com/png.latex?b_%7Bii%7D%7Cb_%7Bif%7D%7Cb_%7Big%7D%7Cb_%7Bio%7D">)，形状为( 4*hidden_size)</p></li>
<li><p>bias_hh_l[k] – 第k层可学习的hidden-hidden偏置(<img src="https://latex.codecogs.com/png.latex?b_%7Bhi%7D%7Cb_%7Bhf%7D%7Cb_%7Bhg%7D%7Cb_%7Bho%7D">)，形状为( 4*hidden_size)。</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1">lstm <span class="op" style="color: #5E5E5E;">=</span> nn.LSTM(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb104-2">input0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb104-3">h0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb104-4">c0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb104-5">output, hn <span class="op" style="color: #5E5E5E;">=</span> lstm(input0, (h0, c0))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">output.size()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([5, 3, 20])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">hn[<span class="dv" style="color: #AD0000;">0</span>].size()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([2, 3, 20])</code></pre>
</div>
</div>
</section>
</section>
<section id="nn.gru" class="level2">
<h2 class="anchored" data-anchor-id="nn.gru">nn.GRU</h2>
<p><em>与LSTM相比，GRU内部少了一个”门控“，参数比LSTM少，但是却也能够达到与LSTM相当的功能。</em></p>
<p>将一个多层的GRU用于输入序列。</p>
<p>对输入序列中的每个元素，每层进行了一下计算：</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Baligned%7D%20r_t&amp;=sigmoid(W_%7Bir%7Dx_t+b_%7Bir%7D+W_%7Bhr%7Dh_%7B(t-1)%7D+b_%7Bhr%7D)%5C%20i_t&amp;=sigmoid(W_%7Bii%7Dx_t+b_%7Bii%7D+W_%7Bhi%7Dh_%7B(t-1)%7D+b_%7Bhi%7D)%5C%20n_t&amp;=tanh(W_%7Bin%7Dx_t+b_%7Bin%7D+rt(W_%7Bhn%7Dh_%7B(t-1)%7D+b_%7Bhn%7D))%5C%20h_t&amp;=(1-i_t)%20nt+i_t*h(t-1)%20%5Cend%7Baligned%7D%20"> <img src="https://latex.codecogs.com/png.latex?h_t">是是时间<img src="https://latex.codecogs.com/png.latex?t">的上的隐状态，<img src="https://latex.codecogs.com/png.latex?x_t">是前一层<img src="https://latex.codecogs.com/png.latex?t">时刻的隐状态或者是第一层的<img src="https://latex.codecogs.com/png.latex?t">时刻的输入，<img src="https://latex.codecogs.com/png.latex?r_t,%20i_t,%20n_t">分别是重置门，输入门和新门。</p>
<section id="示例-1" class="level3">
<h3 class="anchored" data-anchor-id="示例-1">示例：</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">rnn <span class="op" style="color: #5E5E5E;">=</span> nn.GRU(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb109-2">input0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb109-3">h0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb109-4">output, hn <span class="op" style="color: #5E5E5E;">=</span> rnn(input0, h0)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">output.size()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([5, 3, 20])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1">hn.size()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([2, 3, 20])</code></pre>
</div>
</div>
</section>
</section>
<section id="nn.rnncell" class="level2">
<h2 class="anchored" data-anchor-id="nn.rnncell">nn.RNNCell</h2>
<p>将一个多层的 <code>Elman RNNCell</code>，激活函数为<code>tanh</code>或者<code>ReLU</code>，应用于输入序列。公式： <img src="https://latex.codecogs.com/png.latex?%20h'=tanh(w_%7Bih%7D%20x+b_%7Bih%7D+w_%7Bhh%7D%20h+b_%7Bhh%7D)%20"> 如果nonlinearity=relu，那么将会使用ReLU来代替tanh。</p>
<section id="参数-2" class="level3">
<h3 class="anchored" data-anchor-id="参数-2">参数</h3>
<ul>
<li><p>input_size – 输入<img src="https://latex.codecogs.com/png.latex?x">，特征的维度。</p></li>
<li><p>hidden_size – 隐状态特征的维度。</p></li>
<li><p>bias – 如果为False，RNN cell中将不会加入bias，默认为True。</p></li>
<li><p>nonlinearity – 用于选择非线性激活函数 [tanh|relu]. 默认值为： tanh</p></li>
</ul>
</section>
<section id="输入-input-hidden" class="level3">
<h3 class="anchored" data-anchor-id="输入-input-hidden">输入： input, hidden</h3>
<ul>
<li><p>input (batch, input_size): 包含输入特征的tensor。</p></li>
<li><p>hidden (batch, hidden_size): 保存着初始隐状态值的tensor。</p></li>
</ul>
</section>
<section id="输出-h" class="level3">
<h3 class="anchored" data-anchor-id="输出-h">输出： h’</h3>
<ul>
<li>h’ (batch, hidden_size):下一个时刻的隐状态。</li>
</ul>
</section>
<section id="属性-2" class="level3">
<h3 class="anchored" data-anchor-id="属性-2">属性：</h3>
<ul>
<li><p>weight_ih – input-hidden 权重， 可学习，形状是(input_size x hidden_size)。</p></li>
<li><p>weight_hh – hidden-hidden 权重， 可学习，形状是(hidden_size x hidden_size)</p></li>
<li><p>bias_ih – input-hidden 偏置， 可学习，形状是(hidden_size)</p></li>
<li><p>bias_hh – hidden-hidden 偏置， 可学习，形状是(hidden_size)</p></li>
</ul>
</section>
<section id="示例-2" class="level3">
<h3 class="anchored" data-anchor-id="示例-2">示例</h3>
<p>初始化一个（10,20）的rnncell（类似全连接层）</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1">rnn <span class="op" style="color: #5E5E5E;">=</span> nn.RNNCell(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
</div>
<p>生成随机数据</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1">input0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb115-2">hx <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb115-3">output <span class="op" style="color: #5E5E5E;">=</span> []</span></code></pre></div>
</div>
<p>进行预测</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb116-2">    hx <span class="op" style="color: #5E5E5E;">=</span> rnn(input0[i], hx)</span>
<span id="cb116-3">    output.append(hx)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1"><span class="bu" style="color: null;">len</span>(output)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>6</code></pre>
</div>
</div>
</section>
</section>
<section id="nn.lstmcell" class="level2">
<h2 class="anchored" data-anchor-id="nn.lstmcell">nn.LSTMCell</h2>
<p>公式：</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Baligned%7D%20i%20&amp;=%20sigmoid(W_%7Bii%7Dx+b_%7Bii%7D+W_%7Bhi%7Dh+b_%7Bhi%7D)%20%5C%20f%20&amp;=%20sigmoid(W_%7Bif%7Dx+b_%7Bif%7D+W_%7Bhf%7Dh+b_%7Bhf%7D)%20%5C%20o%20&amp;=%20sigmoid(W_%7Bio%7Dx+b_%7Bio%7D+W_%7Bho%7Dh+b_%7Bho%7D)%5C%20g%20&amp;=%20tanh(W_%7Big%7Dx+b_%7Big%7D+W_%7Bhg%7Dh+b_%7Bhg%7D)%5C%20c'%20&amp;=%20f_tc_%7Bt-1%7D+i_tg_t%5C%20h'%20&amp;=%20o_t*tanh(c')%20%5Cend%7Baligned%7D%20"></p>
<section id="参数-3" class="level3">
<h3 class="anchored" data-anchor-id="参数-3">参数</h3>
<ul>
<li>input_size – 输入的特征维度。</li>
<li>hdden_size – 隐状态的维度。</li>
<li>bias – 如果为False，那么将不会使用bias。默认为True。</li>
</ul>
</section>
<section id="输入-input-h_0-c_0-1" class="level3">
<h3 class="anchored" data-anchor-id="输入-input-h_0-c_0-1">输入: input, (h_0, c_0)</h3>
<ul>
<li><p>input (seq_len, batch, input_size): 包含输入序列特征的Tensor。也可以是packed variable</p></li>
<li><p>h_0 ( batch, hidden_size):保存着batch中每个元素的初始化隐状态的Tensor</p></li>
<li><p>c_0 (batch, hidden_size): 保存着batch中每个元素的初始化细胞状态的Tensor</p></li>
</ul>
</section>
<section id="输出-h_1-c_1" class="level3">
<h3 class="anchored" data-anchor-id="输出-h_1-c_1">输出： h_1, c_1</h3>
<ul>
<li>h_1 (batch, hidden_size): 下一个时刻的隐状态。</li>
<li>c_1 (batch, hidden_size): 下一个时刻的细胞状态。</li>
</ul>
</section>
<section id="属性-3" class="level3">
<h3 class="anchored" data-anchor-id="属性-3">属性:</h3>
<ul>
<li><p>weight_ih – input-hidden权重(<img src="https://latex.codecogs.com/png.latex?W_%7Bii%7D%7CW_%7Bif%7D%7CW_%7Big%7D%7CW_%7Bio%7D">)，形状为(input_size x 4*hidden_size)</p></li>
<li><p>weight_hh – hidden-hidden权重(<img src="https://latex.codecogs.com/png.latex?W_%7Bhi%7D%7CW_%7Bhf%7D%7CW_%7Bhg%7D%7CW_%7Bho%7D">)，形状为(hidden_size x 4*hidden_size)。</p></li>
<li><p>bias_ih – input-hidden偏置(<img src="https://latex.codecogs.com/png.latex?b_%7Bii%7D%7Cb_%7Bif%7D%7Cb_%7Big%7D%7Cb_%7Bio%7D">)，形状为( 4*hidden_size)</p></li>
<li><p>bias_hh – hidden-hidden偏置(<img src="https://latex.codecogs.com/png.latex?b_%7Bhi%7D%7Cb_%7Bhf%7D%7Cb_%7Bhg%7D%7Cb_%7Bho%7D">)，形状为( 4*hidden_size)。</p></li>
</ul>
</section>
<section id="例子" class="level3">
<h3 class="anchored" data-anchor-id="例子">例子</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1">rnn <span class="op" style="color: #5E5E5E;">=</span> nn.LSTMCell(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb119-2">input0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb119-3">hx <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb119-4">cx <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb119-5">output <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb119-6"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb119-7">    hx, cx <span class="op" style="color: #5E5E5E;">=</span> rnn(input0[i], (hx, cx))</span>
<span id="cb119-8">    output.append(hx)</span></code></pre></div>
</div>
</section>
</section>
<section id="nn.grucell" class="level2">
<h2 class="anchored" data-anchor-id="nn.grucell">nn.GRUCell</h2>
<p>同上</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1">rnn <span class="op" style="color: #5E5E5E;">=</span> nn.GRUCell(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb120-2">input0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb120-3">hx <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.randn(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb120-4">output <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb120-5"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>):</span>
<span id="cb120-6">    hx <span class="op" style="color: #5E5E5E;">=</span> rnn(input0[i], hx)</span>
<span id="cb120-7">    output.append(hx)</span></code></pre></div>
</div>
</section>
</section>
<section id="linear-layers-线性层" class="level1">
<h1>Linear layers 线性层</h1>
<section id="nn.linearin_features-out_features-biastrue" class="level2">
<h2 class="anchored" data-anchor-id="nn.linearin_features-out_features-biastrue">nn.Linear(in_features, out_features, bias=True)</h2>
<p>对输入数据做线性变换：<img src="https://latex.codecogs.com/png.latex?y%20=%20Ax%20+%20b"></p>
<section id="参数-4" class="level3">
<h3 class="anchored" data-anchor-id="参数-4">参数：</h3>
<ul>
<li>in_features - 每个输入样本的大小</li>
<li>out_features - 每个输出样本的大小</li>
<li>bias - 若设置为False，这层不会学习偏置。默认值：True</li>
</ul>
</section>
<section id="形状" class="level3">
<h3 class="anchored" data-anchor-id="形状">形状：</h3>
<ul>
<li>输入: (N,in_features)</li>
<li>输出： (N,out_features)</li>
</ul>
</section>
<section id="属性-4" class="level3">
<h3 class="anchored" data-anchor-id="属性-4">属性：</h3>
<ul>
<li>weight -形状为(out_features x in_features)的模块中可学习的权值</li>
<li>bias -形状为(out_features)的模块中可学习的偏置</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">m <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb121-2">input0 <span class="op" style="color: #5E5E5E;">=</span> torch.autograd.Variable(torch.randn(<span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb121-3">output <span class="op" style="color: #5E5E5E;">=</span> m(input0)</span>
<span id="cb121-4"><span class="bu" style="color: null;">print</span>(output.size())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([128, 30])</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="dropout-layers-丢弃层" class="level1">
<h1>Dropout layers 丢弃层</h1>
<section id="nn.dropout-nn.dropout2d3d" class="level2">
<h2 class="anchored" data-anchor-id="nn.dropout-nn.dropout2d3d">nn.Dropout / nn.Dropout2d,3d</h2>
<p>随机将输入张量中部分元素设置为0。对于每次前向调用，被置0的元素都是随机的。</p>
<section id="参数-5" class="level3">
<h3 class="anchored" data-anchor-id="参数-5">参数：</h3>
<ul>
<li>p - 将元素置0的概率。默认值：0.5</li>
<li>in-place - 若设置为True，会在原地执行操作。默认值：False</li>
</ul>
</section>
<section id="形状-1" class="level3">
<h3 class="anchored" data-anchor-id="形状-1">形状：</h3>
<ul>
<li>输入： 任意。输入可以为任意形状。</li>
<li>输出： 相同。输出和输入形状相同。</li>
</ul>
</section>
<section id="例子-1" class="level3">
<h3 class="anchored" data-anchor-id="例子-1">例子：</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1">m <span class="op" style="color: #5E5E5E;">=</span> nn.Dropout(p<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>)</span>
<span id="cb123-2">input0 <span class="op" style="color: #5E5E5E;">=</span> torch.autograd.Variable(torch.randn(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">16</span>))</span>
<span id="cb123-3">output <span class="op" style="color: #5E5E5E;">=</span> m(input0)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1">input0.count_nonzero()<span class="op" style="color: #5E5E5E;">-</span>output.count_nonzero()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(46)</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="sparse-layers-稀疏层词向量产生层" class="level1">
<h1>Sparse layers 稀疏层（？）词向量产生层（！）</h1>
<section id="nn.embedding" class="level3">
<h3 class="anchored" data-anchor-id="nn.embedding">nn.Embedding</h3>
<p>一个保存了固定字典和大小的简单查找表。</p>
<p>这个模块常用来保存词嵌入和用下标检索它们。模块的输入是一个下标的列表，输出是对应的词嵌入。</p>
</section>
<section id="参数-6" class="level3">
<h3 class="anchored" data-anchor-id="参数-6">参数：</h3>
<ul>
<li>num_embeddings (int) - 嵌入字典的大小</li>
<li>embedding_dim (int) - 每个嵌入向量的大小</li>
<li>padding_idx (int, optional) - 如果提供的话，输出遇到此下标时用零填充</li>
<li>max_norm (float, optional) - 如果提供的话，会重新归一化词嵌入，使它们的范数小于提供的值</li>
<li>norm_type (float, optional) - 对于max_norm选项计算p范数时的p</li>
<li>scale_grad_by_freq (boolean, optional) - 如果提供的话，会根据字典中单词频率缩放梯度</li>
</ul>
</section>
<section id="属性-5" class="level3">
<h3 class="anchored" data-anchor-id="属性-5">属性：</h3>
<ul>
<li>weight (Tensor) -形状为(num_embeddings, embedding_dim)的模块中可学习的权值</li>
</ul>
</section>
<section id="输入-longtensor-n-w" class="level3">
<h3 class="anchored" data-anchor-id="输入-longtensor-n-w">输入： LongTensor (N, W),</h3>
<ul>
<li>N = mini-batch,</li>
<li>W = 每个mini-batch中提取的下标数</li>
</ul>
</section>
<section id="输出-n-w-embedding_dim" class="level3">
<h3 class="anchored" data-anchor-id="输出-n-w-embedding_dim">输出： (N, W, embedding_dim)</h3>
</section>
<section id="示例-3" class="level3">
<h3 class="anchored" data-anchor-id="示例-3">示例</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1"><span class="co" style="color: #5E5E5E;"># an Embedding module containing 10 tensors of size 3</span></span>
<span id="cb126-2">embedding <span class="op" style="color: #5E5E5E;">=</span> nn.Embedding(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb126-3"><span class="co" style="color: #5E5E5E;"># a batch of 2 samples of 4 indices each</span></span>
<span id="cb126-4">input0 <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.LongTensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>], [<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>]]))</span>
<span id="cb126-5">embedding(input0)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[[-1.3053,  1.2748,  0.5904],
         [-1.3053,  1.2748,  0.5904],
         [-1.3053,  1.2748,  0.5904],
         [-1.3053,  1.2748,  0.5904],
         [ 1.7692, -1.4968, -1.1010]],

        [[-0.3840,  0.3105,  1.5848],
         [ 1.7692, -1.4968, -1.1010],
         [ 0.3168, -0.3723,  0.9616],
         [ 0.3168, -0.3723,  0.9616],
         [ 0.3168, -0.3723,  0.9616]]], grad_fn=&lt;EmbeddingBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1"><span class="co" style="color: #5E5E5E;"># example with padding_idx</span></span>
<span id="cb128-2">embedding <span class="op" style="color: #5E5E5E;">=</span> nn.Embedding(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">3</span>, padding_idx<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb128-3"><span class="bu" style="color: null;">input</span> <span class="op" style="color: #5E5E5E;">=</span> Variable(torch.LongTensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5</span>]]))<span class="co" style="color: #5E5E5E;">#由于这里最大的是5,所以它认为你有至少六个词</span></span>
<span id="cb128-4">embedding(<span class="bu" style="color: null;">input</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[[ 0.0000,  0.0000,  0.0000],
         [ 0.4923, -0.1930, -1.2295],
         [ 0.0000,  0.0000,  0.0000],
         [-0.4291,  0.7431, -0.2245]]], grad_fn=&lt;EmbeddingBackward0&gt;)</code></pre>
</div>
</div>
<p>嵌入的字典尺寸……怎么计算的？</p>
<p>就是单词的总和……并且它以你最大的那个数而不是类别数发出错误</p>
</section>
</section>
<section id="distance-functions" class="level1">
<h1>Distance functions</h1>
<section id="nn.pairwisedistancep2-eps1e-06" class="level2">
<h2 class="anchored" data-anchor-id="nn.pairwisedistancep2-eps1e-06">nn.PairwiseDistance(p=2, eps=1e-06)</h2>
<p>按批计算向量v1, v2之间的距离：</p>
<section id="参数-7" class="level3">
<h3 class="anchored" data-anchor-id="参数-7">参数：</h3>
<ul>
<li>x (Tensor): 包含两个输入batch的张量</li>
<li>p (real): 范数次数，默认值：2</li>
</ul>
</section>
<section id="输入-nd其中d向量维数" class="level3">
<h3 class="anchored" data-anchor-id="输入-nd其中d向量维数">输入： (N,D)，其中D=向量维数</h3>
</section>
<section id="输出-n1" class="level3">
<h3 class="anchored" data-anchor-id="输出-n1">输出： (N,1)</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1">pdist <span class="op" style="color: #5E5E5E;">=</span> nn.PairwiseDistance(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb130-2">input1 <span class="op" style="color: #5E5E5E;">=</span> autograd.Variable(torch.randn(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">128</span>))</span>
<span id="cb130-3">input2 <span class="op" style="color: #5E5E5E;">=</span> autograd.Variable(torch.randn(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">128</span>))</span>
<span id="cb130-4">output <span class="op" style="color: #5E5E5E;">=</span> pdist(input1, input2)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">output</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([15.8720, 17.3040, 16.8190, 16.7946, 16.5825])</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="loss-functions-损失函数" class="level1">
<h1>Loss functions 损失函数</h1>
<p>基本用法：</p>
<pre><code>criterion = LossCriterion() #构造函数有自己的参数
loss = criterion(x, y) #调用标准时也有参数 </code></pre>
<section id="nn.l1loss" class="level2">
<h2 class="anchored" data-anchor-id="nn.l1loss">nn.L1Loss</h2>
<p>创建一个衡量输入x(模型预测输出)和目标y之间差的绝对值的平均值的标准。</p>
<p><img src="https://latex.codecogs.com/png.latex?loss(x,y)=1/n%E2%88%91%7Cxi%E2%88%92yi%7C"></p>
<ul>
<li><p>x 和 y 可以是任意形状，每个包含n个元素。</p></li>
<li><p>对n个元素对应的差值的绝对值求和，得出来的结果除以n。</p></li>
<li><p>如果在创建L1Loss实例的时候在构造函数中传入size_average=False，那么求出来的绝对值的和将不会除以n</p></li>
</ul>
</section>
<section id="nn.mseloss" class="level2">
<h2 class="anchored" data-anchor-id="nn.mseloss">nn.MSELoss</h2>
<p>创建一个衡量输入x(模型预测输出)和目标y之间均方误差标准。</p>
<p><img src="https://latex.codecogs.com/png.latex?loss(x,y)=1/n%E2%88%91(xi%E2%88%92yi)%5E2"></p>
<ul>
<li><p>x 和 y 可以是任意形状，每个包含n个元素。</p></li>
<li><p>对n个元素对应的差值的绝对值求和，得出来的结果除以n。</p></li>
<li><p>如果在创建MSELoss实例的时候在构造函数中传入size_average=False，那么求出来的平方和将不会除以n</p></li>
</ul>
</section>
<section id="nn.crossentropyloss" class="level2">
<h2 class="anchored" data-anchor-id="nn.crossentropyloss">nn.CrossEntropyLoss</h2>
<p><em>交叉熵损失</em></p>
<p>此标准将LogSoftMax和NLLLoss集成到一个类中。</p>
<p>当训练一个多类分类器的时候，这个方法是十分有用的。</p>
<ul>
<li>weight(tensor): 1-D tensor，n个元素，分别代表n类的权重，如果你的训练样本很不均衡的话，是非常有用的。默认值为None。</li>
</ul>
<section id="调用时参数" class="level3">
<h3 class="anchored" data-anchor-id="调用时参数">调用时参数：</h3>
<ul>
<li><p>input : 包含每个类的得分，2-D tensor,shape为 batch*n</p></li>
<li><p>target: 大小为 n 的 1—D tensor，包含类别的索引(0到 n-1)。</p></li>
<li><p>计算出的loss对mini-batch的大小取了平均。</p></li>
</ul>
</section>
<section id="形状shape" class="level3">
<h3 class="anchored" data-anchor-id="形状shape">形状(shape)：</h3>
<ul>
<li><p>Input: (N,C) C 是类别的数量</p></li>
<li><p>Target: (N) N是mini-batch的大小，0 &lt;= targets[i] &lt;= C-1</p></li>
</ul>
</section>
</section>
<section id="nn.nllloss" class="level2">
<h2 class="anchored" data-anchor-id="nn.nllloss">nn.NLLLoss</h2>
<p><em>负对数似然</em></p>
<p>用于训练一个n类分类器。</p>
<p><code>weight</code>参数应该是一个1-Dtensor(如果提供的话)，里面的值对应类别的权重。当你的训练集样本不均衡的话，使用这个参数是非常有用的。</p>
<p>输入是一个包含类别<code>log-probabilities</code>的2-D tensor，形状是（mini-batch， n）</p>
<p>可以通过在最后一层加<code>LogSoftmax</code>来获得类别的<code>log-probabilities</code>。</p>
<p>如果您不想增加一个额外层的话，您可以使用<code>CrossEntropyLoss</code>。</p>
<p>此loss期望的<code>target</code>是类别的索引 (0 to N-1, where N = number of classes)</p>
<section id="参数-8" class="level3">
<h3 class="anchored" data-anchor-id="参数-8">参数：</h3>
<ul>
<li><p>weight (Tensor, optional) – 手动指定每个类别的权重。如果给定的话，必须是长度为nclasses</p></li>
<li><p>size_average (bool, optional) – 默认情况下，会计算<code>mini-batch</code> <code>loss</code>的平均值。然而，如果size_average=False那么将会把mini-batch中所有样本的loss累加起来。</p></li>
</ul>
</section>
<section id="形状-2" class="level3">
<h3 class="anchored" data-anchor-id="形状-2">形状:</h3>
<ul>
<li><p>Input: (N,C) , C是类别的个数</p></li>
<li><p>Target: (N) ， target中每个值的大小满足 0 &lt;= targets[i] &lt;= C-1</p></li>
</ul>
</section>
<section id="例子-2" class="level3">
<h3 class="anchored" data-anchor-id="例子-2">例子：</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">m <span class="op" style="color: #5E5E5E;">=</span> nn.LogSoftmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb134-2">loss <span class="op" style="color: #5E5E5E;">=</span> nn.NLLLoss()</span>
<span id="cb134-3"><span class="co" style="color: #5E5E5E;"># input is of size nBatch x nClasses = 3 x 5</span></span>
<span id="cb134-4">input0 <span class="op" style="color: #5E5E5E;">=</span> autograd.Variable(torch.randn(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>), requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb134-5"><span class="co" style="color: #5E5E5E;"># each element in target has to have 0 &lt;= value &lt; nclasses</span></span>
<span id="cb134-6">target <span class="op" style="color: #5E5E5E;">=</span> autograd.Variable(torch.LongTensor([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>]))</span>
<span id="cb134-7">output <span class="op" style="color: #5E5E5E;">=</span> loss(m(input0), target)</span>
<span id="cb134-8">output.backward()</span></code></pre></div>
</div>
</section>
<section id="nn.nllloss2d" class="level3">
<h3 class="anchored" data-anchor-id="nn.nllloss2d">nn.NLLLoss2d</h3>
<ul>
<li><p>weight (Tensor, optional) – 用来作为每类的权重(如果提供的话),必须为1-Dtensor，大小为C：类别的个数。</p></li>
<li><p>size_average – 默认情况下，会计算 mini-batch loss均值。如果设置为 False 的话，将会累加mini-batch中所有样本的loss值。默认值：True。</p></li>
</ul>
</section>
<section id="nn.kldivloss" class="level3">
<h3 class="anchored" data-anchor-id="nn.kldivloss">nn.KLDivLoss</h3>
<p><a href="https://zh.wikipedia.org/zh-cn/%E7%9B%B8%E5%AF%B9%E7%86%B5"><em>相对熵损失</em></a></p>
<p>相对熵 = 某个策略的交叉熵 - 信息熵</p>
<p>计算 KL 散度损失。</p>
<p>KL散度常用来描述两个分布的距离，并在输出分布的空间上执行直接回归是有用的。</p>
<p>与<code>NLLLoss</code>一样，给定的输入应该是<code>log-probabilities</code>。然而。和<code>NLLLoss</code>不同的是，<code>input</code>不限于2-D tensor，因为此标准是基于element的。</p>
<p><code>target</code> 应该和 <code>input</code>的形状相同。</p>
<p>默认情况下，loss会基于element求平均。如果 size_average=False,loss 会被累加起来。</p>
</section>
</section>
<section id="nn.bceloss" class="level2">
<h2 class="anchored" data-anchor-id="nn.bceloss">nn.BCELoss</h2>
<p>计算 target 与 output 之间的二元交叉熵。</p>
<p><img src="https://latex.codecogs.com/png.latex?%20loss(o,t)=-%5Cfrac%7B1%7D%7Bn%7D%5Csum_i(t%5Bi%5D%20log(o%5Bi%5D)+(1-t%5Bi%5D)%20log(1-o%5Bi%5D))%20"></p>
<p>如果weight被指定 ：</p>
<p><img src="https://latex.codecogs.com/png.latex?%20loss(o,t)=-%5Cfrac%7B1%7D%7Bn%7D%5Csum_iweights%5Bi%5D%20(t%5Bi%5D%20log(o%5Bi%5D)+(1-t%5Bi%5D)*%20log(1-o%5Bi%5D))%20"></p>
</section>
<section id="nn.marginrankingloss" class="level2">
<h2 class="anchored" data-anchor-id="nn.marginrankingloss">nn.MarginRankingLoss</h2>
<p>排序损失函数</p>
<p>创建一个标准，给定输入 <img src="https://latex.codecogs.com/png.latex?x1">,<img src="https://latex.codecogs.com/png.latex?x2">两个1-D mini-batch Tensor’s，和一个<img src="https://latex.codecogs.com/png.latex?y">(1-D mini-batch tensor) ,<img src="https://latex.codecogs.com/png.latex?y">里面的值只能是-1或1。</p>
<p>如果 y=1，代表第一个输入的值应该大于第二个输入的值，如果y=-1的话，则相反。</p>
</section>
<section id="nn.hingeembeddingloss" class="level2">
<h2 class="anchored" data-anchor-id="nn.hingeembeddingloss">nn.HingeEmbeddingLoss</h2>
<p>用于判断两个向量是否相似，输入是两个向量之间的距离</p>
<p>给定一个输入 <img src="https://latex.codecogs.com/png.latex?x">(2-D mini-batch tensor)和对应的 标签 <img src="https://latex.codecogs.com/png.latex?y"> (1-D tensor,1,-1)，此函数用来计算两组向量之间的损失值。这个loss通常用来测量两个输入是否相似，即：使用L1 成对距离。典型是用在学习非线性 embedding或者半监督学习中：</p>
<p><img src="https://latex.codecogs.com/png.latex?x">和<img src="https://latex.codecogs.com/png.latex?y">可以是任意形状，且都有n的元素，loss的求和操作作用在所有的元素上，然后除以n。如果您不想除以n的话，可以通过设置size_average=False。</p>
<section id="例子-3" class="level3">
<h3 class="anchored" data-anchor-id="例子-3">例子：</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">hinge_loss <span class="op" style="color: #5E5E5E;">=</span> nn.HingeEmbeddingLoss(margin<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>)</span>
<span id="cb135-2">a <span class="op" style="color: #5E5E5E;">=</span> torch.randn(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">128</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb135-3">b <span class="op" style="color: #5E5E5E;">=</span> torch.randn(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">128</span>, requires_grad<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb135-4">x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> torch.cosine_similarity(a, b)</span>
<span id="cb135-5"><span class="co" style="color: #5E5E5E;"># 定义a与b之间的距离为x</span></span>
<span id="cb135-6"><span class="bu" style="color: null;">print</span>(x.size())</span>
<span id="cb135-7">y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> torch.empty(<span class="dv" style="color: #AD0000;">100</span>).random_(<span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb135-8">output <span class="op" style="color: #5E5E5E;">=</span> hinge_loss(x, y)</span>
<span id="cb135-9"><span class="bu" style="color: null;">print</span>(output.item())</span>
<span id="cb135-10"></span>
<span id="cb135-11">hinge_loss <span class="op" style="color: #5E5E5E;">=</span> nn.HingeEmbeddingLoss(margin<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, reduction<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"none"</span>)</span>
<span id="cb135-12">output <span class="op" style="color: #5E5E5E;">=</span> hinge_loss(x, y)</span>
<span id="cb135-13"><span class="bu" style="color: null;">print</span>(output)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([100])
0.4487411081790924
tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.9112, 0.0000, 0.9974, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0311, 0.0000, 0.0000, 0.0000, 1.0199, 0.0000, 0.9601, 0.0000, 1.0657, 0.8382, 1.0400, 1.0655,
        0.0000, 0.8794, 0.0000, 1.0720, 1.0367, 1.0841, 0.8692, 1.0141, 0.0000, 0.9980, 0.0000, 0.9341, 1.0703, 1.0783, 1.1506, 0.0000, 0.8374, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.1050,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.1145, 1.0173, 0.0000, 0.0000, 0.9589, 0.0000, 1.0414, 0.8126, 0.8562, 0.0000, 1.2132, 1.0313, 0.0000, 0.0000, 1.0011, 0.0000, 0.0000, 1.1065,
        0.0000, 1.0584, 0.0000, 1.1716, 0.0000, 0.9385, 0.0000, 0.9754, 0.0000, 0.0000, 1.0354, 0.0000, 1.0717, 0.0000, 0.0000, 1.1551, 0.0000, 0.8999, 0.0000, 1.1494, 0.0000, 0.0000, 1.0500, 0.0000,
        0.0000, 0.9993, 0.0000, 1.1581], grad_fn=&lt;AddBackward0&gt;)</code></pre>
</div>
</div>
</section>
</section>
<section id="nn.multilabelmarginloss" class="level2">
<h2 class="anchored" data-anchor-id="nn.multilabelmarginloss">nn.MultiLabelMarginLoss</h2>
<p>计算多标签分类的 hinge loss(margin-based loss) ，计算loss时需要两个输入： input x(2-D mini-batch Tensor)，和 output y(2-D tensor表示mini-batch中样本类别的索引)。</p>
<section id="例子-4" class="level3">
<h3 class="anchored" data-anchor-id="例子-4">例子：</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.FloatTensor([[<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.2</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.8</span>], [<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.2</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.8</span>]])</span>
<span id="cb137-2"><span class="bu" style="color: null;">print</span>(x.size())</span>
<span id="cb137-3">y <span class="op" style="color: #5E5E5E;">=</span> torch.LongTensor([<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>])</span>
<span id="cb137-4"><span class="bu" style="color: null;">print</span>(y.size())</span>
<span id="cb137-5"></span>
<span id="cb137-6">loss <span class="op" style="color: #5E5E5E;">=</span> nn.MultiMarginLoss(reduction<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"none"</span>)</span>
<span id="cb137-7">loss_val <span class="op" style="color: #5E5E5E;">=</span> loss(x, y)</span>
<span id="cb137-8"><span class="bu" style="color: null;">print</span>(loss_val)</span>
<span id="cb137-9"></span>
<span id="cb137-10">loss <span class="op" style="color: #5E5E5E;">=</span> nn.MultiMarginLoss(reduction<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sum"</span>)</span>
<span id="cb137-11">loss_val <span class="op" style="color: #5E5E5E;">=</span> loss(x, y)</span>
<span id="cb137-12"><span class="bu" style="color: null;">print</span>(loss_val.item())</span>
<span id="cb137-13"><span class="bu" style="color: null;">print</span>(loss_val.item() <span class="op" style="color: #5E5E5E;">/</span> x.size(<span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb137-14"><span class="co" style="color: #5E5E5E;">#验证</span></span>
<span id="cb137-15"><span class="bu" style="color: null;">print</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">4</span> <span class="op" style="color: #5E5E5E;">*</span> ((<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.8</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.1</span>) <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.8</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span>) <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.8</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.4</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb137-16">                       (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.8</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.1</span>) <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.8</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span>) <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.8</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.4</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([2, 4])
torch.Size([2])
tensor([0.3250, 0.3250])
0.6499999761581421
0.32499998807907104
0.32499999999999996</code></pre>
</div>
</div>
</section>
</section>
<section id="nn.smoothl1loss" class="level2">
<h2 class="anchored" data-anchor-id="nn.smoothl1loss">nn.SmoothL1Loss</h2>
<p>平滑版L1 loss。</p>
<p>此loss对于异常点的敏感性不如MSELoss，而且，在某些情况下防止了梯度爆炸，(参照 Fast R-CNN)。这个loss有时也被称为 Huber loss。</p>
</section>
<section id="nn.softmarginloss" class="level2">
<h2 class="anchored" data-anchor-id="nn.softmarginloss">nn.SoftMarginLoss</h2>
<p>用于二分类任务</p>


</section>
</section>

 ]]></description>
  <guid>https://doucx.github.io/blog/blog/posts/22_12_23_torch.nn/12_23_torch.nn.html</guid>
  <pubDate>Fri, 23 Dec 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
